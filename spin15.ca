########################################
## Extend G2 construction to Spin(15)
## File: spin15.ca - G.P.Wilmot
####################################
# This file is a work in progress starting from a hand generated Triads15 3-form.
f15Basis = Tensor(("f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fA", "fB", "fC", "fD", "fE", "fF"))
 
# From CA(15) find 12000+ tetrahedron faces selected to define sub-sedenion algebras.
Triads15gen = (CA.Eval(x) for x in Lib.triads(15)) # Too big and slow - store using tri2str()
# Trying to read & expand 100k is >20MB and python exec blows up RAM more than size of structure!
# Hence use tri2str to store. Too big is > 13e6.
# First 106 Triads15 here - use triads15Load to load spin15-triads?? for the rest
# and decode using str2tri(). First one is made manually, then repeat swap(for all Basis(15,0,2))
# to get 106 sorted, then repeat 4 times so far.

def triads15load(code=0):
  """triads15load([code=0])
     Loads spin15-triads<code>.ca to extend Triads15 with level=code (a0=all)
     from triads15Build() with cardinality code=1: 126190, 2=1768755, 3=13097003
     4=... where 3 is files 3a-3g and 4 is 4a-4? TBD - work in progress."""
  global Triads15
  global Triads15parts
  loading, Triads15parts = [], [tris0]
  if code in (0, 1):
    loading += ["spin15-triads1.ca"]
  if code in (0, 2):
    loading += ["spin15-triads2.ca"]
  if code in (0, 3):
    loading += map(lambda x: "spin15-triads%s.ca" %x, ("3a", "3b", "3c", "3d", "3e", "3f", "3g"))
  for filename in loading:
    buf = Lib.readText(filename)
    exec(buf)
  if code in (0, 1):
    Triads15parts.append(tris1)
  if code in (0, 2):
    Triads15parts.append(tris2)
  if code in (0, 3):
    Triads15parts.extend([tris3a, tris3b, tris3c, tris3d, tris3e, tris3f, tris3g])
  Triads15 = sorted(Triads15)
  return len(Triads15)

Triads15_0 = e123+e145+e167+e189+e1AB+e1CD+e1EF+e246+e257+e28A+e29B+e2CE+e2DF+e347+e356+e38B+e39A \
            +e3CF+e3DE+e48C+e49D+e4AE+e4BF+e58D+e59C+e5AF+e5BE+e68E+e69F+e6AC+e6BD+e78F+e79E+e7AD+e7BC
Nac15Map_0 = (
  (210, 210, 210, 210, 210, 210, 210, 210, 224, 200, 224, 200, 224, 200, 208, 208, 208, 208,
   208, 208, 252, 228, 204, 180, 236, 236, 188, 188, 220, 196, 220, 196, 204, 204, 204, 204),)

if "Triads15" in globals():
  Backup15 = Triads15
Triads15 = [ \
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CF2DE34735638B39A3CE3DF48C49D4AF4BE58D59C5AE5BF68F69E6AC6BD78E79F7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CF2DE34735638B39A3CE3DF48D49C4AE4BF58C59D5AF5BE68E69F6AD6BC78F79E7AC7BD",
 "1231451671891AB1CD1EF24625728B29A2CE2DF34735638A39B3CF3DE48C49D4AF4BE58D59C5AE5BF68E69F6AD6BC78F79E7AC7BD",
 "1231451671891AB1CD1EF24625728B29A2CE2DF34735638A39B3CF3DE48D49C4AE4BF58C59D5AF5BE68F69E6AC6BD78E79F7AD7BC",
 "1231451671891AB1CD1EF24725628A29B2CE2DF34635738B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68F69E6AD6BC78E79F7AC7BD",
 "1231451671891AB1CD1EF24725628A29B2CE2DF34635738B39A3CF3DE48D49C4AF4BE58C59D5AE5BF68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CD1EF24725628B29A2CF2DE34635738A39B3CE3DF48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CE1DF24625728A29B2CD2EF34735638B39A3CF3DE48C49E4AD4BF58E59C5AF5BD68D69F6AC6BE78F79D7AE7BC",
 "1231451671891AB1CE1DF24625728A29B2CD2EF34735638B39A3CF3DE48F49D4AE4BC58D59F5AC5BE68E69C6AF6BD78C79E7AD7BF",
 "1231451671891AB1CF1DE24625728A29B2CE2DF34735638B39A3CD3EF48C49F4AE4BD58F59C5AD5BE68E69D6AC6BF78D79E7AF7BC",
 "1231451671891AB1CF1DE24625728A29B2CE2DF34735638B39A3CD3EF48E49D4AC4BF58D59E5AF5BC68C69F6AE6BD78F79C7AD7BE",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728D29B2AF2CE34735638B39D3AE3CF48C49A4BF4DE58A59C5BE5DF68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AD1BC1EF24625728A29D2BF2CE34735638D39A3BE3CF48C49B4AE4DF58B59C5AF5DE68E69F6AC6BD78F79E7AB7CD",
 "1231451671891AD1BC1EF24625728C29B2AE2DF34735638B39C3AF3DE48A49D4BF4CE58D59A5BE5CF68E69F6AC6BD78F79E7AB7CD",
 "1231451671891AE1BF1CD24625728A29E2BC2DF34735638E39A3BD3CF48C49D4AB4EF58D59C5AF5BE68B69F6AC6DE78F79B7AD7CE",
 "1231451671891AE1BF1CD24625728F29B2AD2CE34735638B39F3AC3DE48C49D4AB4EF58D59C5AF5BE68E69A6BD6CF78A79E7BC7DF",
 "1231451671891AF1BE1CD24625728A29F2BD2CE34735638F39A3BC3DE48C49D4AE4BF58D59C5AB5EF68E69B6AC6DF78B79E7AD7CF",
 "1231451671891AF1BE1CD24625728E29B2AC2DF34735638B39E3AD3CF48C49D4AE4BF58D59C5AB5EF68A69F6BD6CE78F79A7BC7DE",
 "12314516718A19B1CD1EF2462572892AB2CE2DF34735638B39A3CF3DE48C49E4AD4BF58D59F5AC5BE68E69C6AF6BD78F79D7AE7BC",
 "12314516718A19B1CD1EF2462572892AB2CE2DF34735638B39A3CF3DE48F49D4AE4BC58E59C5AF5BD68D69F6AC6BE78C79E7AD7BF",
 "12314516718B19A1CD1EF24625728A29B2CE2DF3473563893AB3CF3DE48C49F4AE4BD58D59E5AF5BC68E69D6AC6BF78F79C7AD7BE",
 "12314516718B19A1CD1EF24625728A29B2CE2DF3473563893AB3CF3DE48E49D4AC4BF58F59C5AD5BE68C69F6AE6BD78D79E7AF7BC",
 "12314516718C19D1AB1EF24625728A29E2BC2DF34735638B39F3AC3DE4894AE4BF4CD58D59C5AF5BE68E69A6BD6CF78F79B7AD7CE",
 "12314516718C19D1AB1EF24625728F29B2AD2CE34735638E39A3BD3CF4894AE4BF4CD58D59C5AF5BE68B69F6AC6DE78A79E7BC7DF",
 "12314516718D19C1AB1EF24625728A29F2BD2CE34735638B39E3AD3CF48C49D4AE4BF5895AF5BE5CD68E69B6AC6DF78F79A7BC7DE",
 "12314516718D19C1AB1EF24625728E29B2AC2DF34735638F39A3BC3DE48C49D4AE4BF5895AF5BE5CD68A69F6BD6CE78B79E7AD7CF",
 "12314516718E19F1AB1CD24625728A29C2BE2DF34735638B39D3AE3CF48C49A4BF4DE58D59B5AF5CE6896AC6BD6EF78F79E7AD7BC",
 "12314516718E19F1AB1CD24625728D29B2AF2CE34735638C39A3BF3DE48B49D4AE4CF58A59C5BE5DF6896AC6BD6EF78F79E7AD7BC",
 "12314516718F19E1AB1CD24625728A29D2BF2CE34735638B39C3AF3DE48C49B4AE4DF58D59A5BE5CF68E69F6AC6BD7897AD7BC7EF",
 "12314516718F19E1AB1CD24625728C29B2AE2DF34735638D39A3BE3CF48A49D4BF4CE58B59C5AF5DE68E69F6AC6BD7897AD7BC7EF",
 "1231451681791AB1CD1EF24625827A29B2CE2DF34835637B39A3CF3DE47C49D4AE4BF57D59C5AF5BE67E69F6AC6BD78F89E8AD8BC",
 "1231451681791AB1CD1EF24925726B28A2CE2DF34735936A38B3CF3DE46D48C4AE4BF56C58D5AF5BE67E69F78F7AD7BC89E9AC9BD",
 "1231451691781AB1CD1EF24625927B28A2CE2DF34935637A38B3CF3DE47D48C4AE4BF57C58D5AF5BE67F68E6AC6BD79E89F9AD9BC",
 "1231451691781AB1CD1EF24825726A29B2CE2DF34735836B39A3CF3DE46C49D4AE4BF56D59C5AF5BE67F68E79E7AD7BC89F8AC8BD",
 "12314516A17B1891CD1EF24625A27829B2CE2DF34A35637938B3CF3DE47E48C49D4BF57F58D59C5BE67C68E69F6BD7AD8AF9AEABC",
 "12314516A17B1891CD1EF24B25726928A2CE2DF34735B36839A3CF3DE46F48C49D4AE56E58D59C5AF67C6BD78F79E7AD8BE9BFABC",
 "12314516B17A1891CD1EF24625B27928A2CE2DF34B35637839A3CF3DE47F48C49D4AE57E58D59C5AF67D68E69F6AC7BC8BF9BEABD",
 "12314516B17A1891CD1EF24A25726829B2CE2DF34735A36938B3CF3DE46E48C49D4BF56F58D59C5BE67D6AC78F79E7BC8AE9AFABD",
 "12314516C17D1891AB1EF24625C27E28A29B2DF34C35637F38B39A3DE47849D4AE4BF57958D5AF5BE67A68E69F6BD7BC8CF9CEACD",
 "12314516C17D1891AB1EF24D25726F28A29B2CE34735D36E38B39A3CF46948C4AE4BF56859C5AF5BE67A6BD78F79E7BC8DE9DFACD",
 "12314516D17C1891AB1EF24625D27F28A29B2CE34D35637E38B39A3CF47948C4AE4BF57859C5AF5BE67B68E69F6AC7AD8DF9DEBCD",
 "12314516D17C1891AB1EF24C25726E28A29B2DF34735C36F38B39A3DE46849D4AE4BF56958D5AF5BE67B6AC78F79E7AD8CE9CFBCD",
 "12314516E17F1891AB1CD24625E27C28A29B2DF34E35637D38B39A3CF47A48C49D4BF57B58D59C5AF67869F6AC6BD79E8EFADEBCE",
 "12314516E17F1891AB1CD24F25726D28A29B2CE34735F36C38B39A3DE46B48C49D4AE56A58D59C5BE67869F79E7AD7BC8EFACFBDF",
 "12314516F17E1891AB1CD24625F27D28A29B2CE34F35637C38B39A3DE47B48C49D4AE57A58D59C5BE67968E6AC6BD78F9EFADFBCF",
 "12314516F17E1891AB1CD24E25726C28A29B2DF34735E36D38B39A3CF46A48C49D4BF56B58D59C5AF67968E78F7AD7BC9EFACEBDE",
 "1231461571891AB1CD1EF24526728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58E59F5AC5BD68D69C6AF6BE78F79E7AD7BC",
 "1231461571891AB1CD1EF24526728A29B2CE2DF34735638B39A3CF3DE48F49E4AD4BC58D59C5AF5BE68E69F6AC6BD78C79D7AE7BF",
 "12314615718A19B1CE1DF2452672892AB2CD2EF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231471561891AB1CD1EF24625728A29B2CE2DF34536738B39A3CF3DE48C49D4AE4BF58F59E5AD5BC68E69F6AC6BD78D79C7AF7BE",
 "1231471561891AB1CD1EF24625728A29B2CE2DF34536738B39A3CF3DE48E49F4AC4BD58D59C5AF5BE68C69D6AE6BF78F79E7AD7BC",
 "12314715618B19A1CF1DE24625728A29B2CE2DF3453673893AB3CD3EF48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231481591671AB1CD1EF24625A27829B2CE2DF34735B36839A3CF3DE45C49D4AE4BF56E57F58D69F6AC6BD79E7AD7BC89C8AF8BE",
 "1231481591671AB1CD1EF24B25726928A2CE2DF34A35637938B3CF3DE45C46F47E49D58D5AF5BE68E6AC6BD78F7AD7BC89C9AE9BF",
 "1231491581671AB1CD1EF24625B27928A2CE2DF34735A36938B3CF3DE45D48C4AE4BF56F57E59C68E6AC6BD78F7AD7BC89D9AF9BE",
 "1231491581671AB1CD1EF24A25726829B2CE2DF34B35637839A3CF3DE45D46E47F48C59C5AF5BE69F6AC6BD79E7AD7BC89D8AE8BF",
 "12314A15B1671891CD1EF24625827A29B2CE2DF34735936A38B3CF3DE45E48C49D4BF56C57D5AF68E69F6BD78F79E7BC8AD9ACABE",
 "12314A15B1671891CD1EF24925726B28A2CE2DF34835637B39A3CF3DE45E46D47C4BF58D59C5AF68E69F6AC78F79E7AD8BC9BDABE",
 "12314B15A1671891CD1EF24625927B28A2CE2DF34735836B39A3CF3DE45F48C49D4AE56D57C5BE68E69F6AC78F79E7AD8BD9BCABF",
 "12314B15A1671891CD1EF24825726A29B2CE2DF34935637A38B3CF3DE45F46C47D4AE58D59C5BE68E69F6BD78F79E7BC8AC9ADABF",
 "12314C15D1671891AB1EF24625E27C28A29B2DF34735F36C38B39A3DE45849D4AE4BF56A57B59C68E69F6BD78F79E7AD8CDACFBCE",
 "12314C15D1671891AB1EF24F25726D28A29B2CE34E35637D38B39A3CF45846B47A49D59C5AF5BE68E69F6AC78F79E7BC8CDADEBDF",
 "12314D15C1671891AB1EF24625F27D28A29B2CE34735E36D38B39A3CF45948C4AE4BF56B57A58D68E69F6AC78F79E7BC9CDADFBDE",
 "12314D15C1671891AB1EF24E25726C28A29B2DF34F35637C38B39A3DE45946A47B48C58D5AF5BE68E69F6BD78F79E7AD9CDACEBCF",
 "12314E15F1671891AB1CD24625C27E28A29B2DF34735D36E38B39A3CF45A48C49D4BF5685795BE69F6AC6BD78F7AD7BC8DE9CEAEF",
 "12314E15F1671891AB1CD24D25726F28A29B2CE34C35637F38B39A3DE45A4694784BF58D59C5BE68E6AC6BD79E7AD7BC8CF9DFAEF",
 "12314F15E1671891AB1CD24625D27F28A29B2CE34735C36F38B39A3DE45B48C49D4AE5695785AF68E6AC6BD79E7AD7BC8DF9CFBEF",
 "12314F15E1671891AB1CD24C25726E28A29B2DF34D35637E38B39A3CF45B4684794AE58D59C5AF69F6AC6BD78F7AD7BC8CE9DEBEF",
 "1241351671891AB1CD1EF23625728A29B2CE2DF34738C39D3AE3BF45648B49A4CF4DE58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1241351671891AB1CD1EF23625728D29C2AF2BE34738B39A3CF3DE45648C49D4AE4BF58A59B5CE5DF68E69F6AC6BD78F79E7AD7BC",
 "12413516718E19F1AC1BD23625728A29B2CE2DF34738B39A3CF3DE45648C49D4AE4BF58D59C5AF5BE6896AB6CD6EF78F79E7AD7BC",
 "1251341671891AB1CD1EF23724628A29B2CE2DF35638D39C3AF3BE45748C49D4AE4BF58B59A5CF5DE68E69F6AC6BD78F79E7AD7BC",
 "1251341671891AB1CD1EF23724628C29D2AE2BF35638B39A3CF3DE45748A49B4CE4DF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "12513416718F19E1AD1BC23724628A29B2CE2DF35638B39A3CF3DE45748C49D4AE4BF58D59C5AF5BE68E69F6AC6BD7897AB7CD7EF",
 "1261371451891AB1CD1EF23425728A29B2CE2DF35638E39F3AC3BD46748C49D4AE4BF58D59C5AF5BE68B69A6CF6DE78F79E7AD7BC",
 "1261371451891AB1CD1EF23425728F29E2AD2BC35638B39A3CF3DE46748C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78A79B7CE7DF",
 "12613714518C19D1AE1BF23425728A29B2CE2DF35638B39A3CF3DE4674894AB4CD4EF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1271361451891AB1CD1EF23524628A29B2CE2DF34738F39E3AD3BC48C49D4AE4BF56758D59C5AF5BE68E69F6AC6BD78B79A7CF7DE",
 "1271361451891AB1CD1EF23524628E29F2AC2BD34738B39A3CF3DE48C49D4AE4BF56758D59C5AF5BE68A69B6CE6DF78F79E7AD7BC",
 "12713614518D19C1AF1BE23524628A29B2CE2DF34738B39A3CF3DE48C49D4AE4BF5675895AB5CD5EF68E69F6AC6BD78F79E7AD7BC",
 "1281391451671AB1CD1EF23A24625729B2CE2DF34C35D36E37F38B47849D4AE4BF56859C5AF5BE69F6AC6BD79E7AD7BC89A8CF8DE",
 "1281391451671AB1CD1EF23A24D25C26F27E29B34735638B3CF3DE46948C4AE4BF57958D5AF5BE68E6AC6BD78F7AD7BC89A9CE9DF",
 "12813914E15F16C17D1AB23A24625729B2CE2DF34735638B3CF3DE45A48C49D4BF58D59C5BE67A68E69F6BD78F79E7BC89AACDAEF",
 "1291381451671AB1CD1EF23B24625728A2CE2DF34D35C36F37E39A47948C4AE4BF56958D5AF5BE68E6AC6BD78F7AD7BC89B9CF9DE",
 "1291381451671AB1CD1EF23B24C25D26E27F28A34735639A3CF3DE46849D4AE4BF57859C5AF5BE69F6AC6BD79E7AD7BC89B8CE8DF",
 "12913814F15E16D17C1AB23B24625728A2CE2DF34735639A3CF3DE45B48C49D4AE58D59C5AF67B68E69F6AC78F79E7AD89BBCDBEF",
 "12A13B1451671891CD1EF23824625729B2CE2DF34E35F36C37D39A47A48C49D4BF56A58D59C5BE68E69F6BD78F79E7BC8ABACFADE",
 "12A13B1451671891CD1EF23824F25E26D27C29B34735639A3CF3DE46B48C49D4AE57B58D59C5AF68E69F6AC78F79E7AD8ABBCEBDF",
 "12A13B14C15D16E17F18923824625729B2CE2DF34735639A3CF3DE45849D4AE4BF59C5AF5BE67869F6AC6BD79E7AD7BC8AB8CD8EF",
 "12B13A1451671891CD1EF23924625728A2CE2DF34F35E36D37C38B47B48C49D4AE56B58D59C5AF68E69F6AC78F79E7AD9ABBCFBDE",
 "12B13A1451671891CD1EF23924E25F26C27D28A34735638B3CF3DE46A48C49D4BF57A58D59C5BE68E69F6BD78F79E7BC9ABACEADF",
 "12B13A14D15C16F17E18923924625728A2CE2DF34735638B3CF3DE45948C4AE4BF58D5AF5BE67968E6AC6BD78F7AD7BC9AB9CD9EF",
 "12C13D1451671891AB1EF23E24625728A29B2DF34835936A37B3CF47C49D4AE4BF56C58D5AF5BE68E69F6BD78F79E7AD8BC9ACCDE",
 "12C13D1451671891AB1EF23E24925826B27A2DF34735638B39A3CF46D48C4AE4BF57D59C5AF5BE68E69F6AC78F79E7BC8AD9BDCDE",
 "12C13D14A15B1681791EF23E24625728A29B2DF34735638B39A3CF45E48C49D4BF58D59C5AF67E69F6AC6BD78F7AD7BC89EABECDE",
 "12D13C1451671891AB1EF23F24625728A29B2CE34935836B37A3DE47D48C4AE4BF56D59C5AF5BE68E69F6AC78F79E7BC8BD9ADCDF",
 "12D13C1451671891AB1EF23F24825926A27B2CE34735638B39A3DE46C49D4AE4BF57C58D5AF5BE68E69F6BD78F79E7AD8AC9BCCDF",
 "12D13C14B15A1691781EF23F24625728A29B2CE34735638B39A3DE45F48C49D4AE58D59C5BE67F68E6AC6BD79E7AD7BC89FABFCDF",
 "12E13F1451671891AB1CD23C24625728A29B2DF34A35B3683793DE47E48C49D4BF56E58D59C5AF69F6AC6BD78F7AD7BC8BE9AECEF",
 "12E13F1451671891AB1CD23C24B25A2692782DF34735638B39A3DE46F48C49D4AE57F58D59C5BE68E6AC6BD79E7AD7BC8AF9BFCEF",
 "12E13F14815916A17B1CD23C24625728A29B2DF34735638B39A3DE45C49D4AE4BF58D5AF5BE67C68E69F6BD78F79E7AD89CABCCEF",
 "12F13E1451671891AB1CD23D24625728A29B2CE34B35A3693783CF47F48C49D4AE56F58D59C5BE68E6AC6BD79E7AD7BC8BF9AFDEF",
 "12F13E1451671891AB1CD23D24A25B2682792CE34735638B39A3CF46E48C49D4BF57E58D59C5AF69F6AC6BD78F7AD7BC8AE9BEDEF",
 "12F13E14915816B17A1CD23D24625728A29B2CE34735638B39A3CF45D48C4AE4BF59C5AF5BE67D68E69F6AC78F79E7BC89DABDDEF",
]
tris0 = Triads15
Triads15parts = [tris0]

def triads15build(triads, offs=0, maxs=105, name=None):
  """triads15build(triads, [offs, maxs, name])
     Extend Triads15 with rotations[offs:maxs] of triads."""
  global Triads15
  if not name:
    name = "outs%02d-%02d" %(offs, max)
  Triads15 = set(Triads15)
  Lib.checkMem(len(Triads15),1)
  rrr = CA.Basis(15,0,2)
  rr = 0
  out = set()
  for idx in range(offs, maxs):
    rr = rrr[idx]
    for tt in triads:
      nxt = tri2str(abs(str2tri(tt).swap(rr)))
      if nxt not in Triads15:
        out.add(nxt)
    if Lib.checkMem(len(out), 1, extra=rr):
      break
  Triads15.update(out)
  Lib.save(name, out, name +".ca")
  Lib.checkMem(len(Triads15), extra=rr, finish=True)
  return out

def nac15subalg(tri, pos=None):
  """nac15subalg(tri, [pos])
     Return non-associative cnt for tri or str2tri(tri).allSigns()[pos] sub-algebra."""
  if pos is not None:
    if pos not in range(36):
      raise Exception("Invalid nac15subalg signed position")
    tri = list(str2tri(tri).allSigns(36))[pos]
  return len(list(Lib.triadDump(Tensor.Triads(*tri.spin(f15Basis)) \
                     .assocTriads(f15Basis,True),f15Basis,1)))

# Sign combination indices for mirrors from the first 36 combinations (add all 32363-idx)
Nac15Mirrors = []

def nac15mirrors(idx):
  """nac15mirrors(idx)
     Check Triads15[idx] first 36 signed combination have the same mirror indices."""
  if idx < 0 or idx >= len(Triads15):
    raise Exception("Invalid nac15subalg signed position")
  #global Triads15
  #global Nac15Mirrors
  out = []
  triad = str2tri(Triads15[idx])
  cmp = []
  for cnt,tri in enumerate(triad.allSigns(36)):
    buf = [cnt]
    for ref in CA.Basis(15,0,1):
      #idx32768,parity = ref.reflect(tri).allSignsIndices()
      terms = Tensor(*list(CA(**dict((x,))) for x in ref.reflect(tri).copyTerms()))
      cnt = 0
      sgns = []
      for idx,term in enumerate(terms):
        if term < 0:
          sgns.append(idx +1)
        cnt += 1
      buf.append(len(sgns))
      #buf.append(idx32768)
      #buf.append(32768 -idx32768)
    cmp.append(buf)#sorted(buf)[:36])
  #if cmp != Nac15Mirrors:
  #  print("NOT EQUAL", idx)
  #  return cmp
  #return []
  return cmp

# Non-assoc cnt to sub-algebra name & first example idx and allSign position (B1=S)
# There are 100 so far but expect more from tris4 series. Names may change - TBD - work in progress.
Nac15Names = {\
 128: ('A0', 6, 894627, 4),   130: ('A1', 2, 288103, 4),   134: ('A2', 6, 1082660, 22),
 136: ('A3', 2, 947618, 17),  138: ('A4', 4, 503345, 6),   140: ('A5', 5, 67414, 20),
 142: ('A6', 2, 1760331, 32), 144: ('A7', 3, 808028, 18),  146: ('A8', 3, 173137, 30),
 148: ('A9', 3, 30098, 30),   150: ('B0', 2, 1333629, 22), 152: ('B1', 2, 985089, 30),
 154: ('B2', 2, 1311416, 22), 156: ('B3', 2, 1311252, 29), 158: ('B4', 1, 755, 24),
 160: ('B5', 2, 1311252, 11), 162: ('B6', 2, 1311252, 0),  164: ('B7', 2, 1311252, 21),
 166: ('B8', 2, 1333539, 6),  168: ('B9', 2, 1311252, 16), 170: ('C0', 1, 115, 0),
 172: ('C1', 2, 1311252, 24), 174: ('C2', 2, 1200956, 18), 176: ('C3', 1, 38, 13),
 178: ('C4', 2, 1044090, 0),  180: ('C5', 3, 0, 23),       182: ('C6', 2, 1287006, 18),
 184: ('C7', 1, 38, 9),       186: ('C8', 1, 114, 0),      188: ('C9', 3, 0, 26),
 190: ('D0', 3, 396, 11),     192: ('D1', 1, 38, 14),      194: ('D2', 1, 38, 0),
 196: ('D3', 3, 0, 29),       198: ('D4', 3, 396, 16),     200: ('D5', 3, 0, 9),
 202: ('D6', 1, 118, 0),      204: ('D7', 3, 0, 22),       206: ('D8', 3, 396, 30),
 208: ('D9', 3, 0, 14),       210: ('E0', 3, 0, 0),        212: ('E1', 1, 38, 20),
 214: ('E2', 1, 182, 24),     216: ('E3', 1, 38, 11),      218: ('E4', 1, 119, 0),
 220: ('E5', 3, 0, 28),       222: ('E6', 3, 396, 18),     224: ('E7', 3, 0, 8),
 226: ('E8', 2, 1311254, 0),  228: ('E9', 3, 0, 21),       230: ('F0', 1, 222, 12),
 232: ('F1', 2, 1311254, 12), 234: ('F2', 2, 1260558, 17), 236: ('F3', 3, 0, 24),
 238: ('F4', 3, 396, 12),     240: ('F5', 1, 38, 10),      242: ('F6', 2, 1311289, 22),
 244: ('F7', 2, 1354012, 22), 246: ('F8', 2, 1260559, 10), 248: ('F9', 2, 1311254, 26),
 250: ('G0', 2, 1260558, 10), 252: ('G1', 3, 0, 20),       254: ('G2', 2, 1311289, 25),
 256: ('G3', 1, 119, 27),     258: ('G4', 1, 222, 28),     260: ('G5', 2, 1354017, 12),
 262: ('G6', 2, 1354021, 14), 264: ('G7', 2, 1311254, 22), 266: ('G8', 2, 1354017, 34),
 268: ('G9', 2, 1354018, 10), 270: ('H0', 2, 1354017, 15), 272: ('H1', 2, 1044092, 33),
 274: ('H2', 2, 1354017, 22), 276: ('H3', 2, 1044092, 11), 278: ('H4', 2, 1354017, 13),
 280: ('H5', 2, 1044092, 9),  282: ('H6', 2, 1354017, 32), 284: ('H7', 2, 1044092, 13),
 286: ('H8', 2, 1354017, 8),  288: ('H9', 2, 1044092, 14), 290: ('I0', 2, 1354017, 0),
 292: ('I1', 2, 1044092, 18), 294: ('I2', 2, 1354017, 19), 296: ('I3', 2, 1044092, 32),
 298: ('I4', 3, 12557, 29),   300: ('I5', 2, 1044092, 10), 302: ('I6', 3, 6076, 10),
 304: ('I7', 2, 1044092, 8),  306: ('I8', 2, 1232305, 15), 308: ('I9', 2, 1044092, 12),
 310: ('J0', 2, 1373335, 17), 312: ('J1', 3, 1712545, 25), 314: ('J2', 2, 331735, 12),
 316: ('J3', 2, 1100937, 30), 318: ('J4', 2, 1090178, 14), 320: ('J5', 2, 1354017, 29),
 322: ('J6', 2, 1044092, 0),  324: ('J7', 2, 1595386, 30), 326: ('J8', 7, 544285, 14),
 328: ('J9', 7, 1752867, 28)}

# Nac15Names extracted from Triads15parts in increasing order == triads15subalg().
Nacs15 = ( \
 "12913B14A15F16E17D18C23425C26728F2AB2DE35E36F37839A3CD45D46847F49B4CE56B57A58969D6AC79E7BC8AE8BD9CFADFBEF",
 "12A13B14915F16E17D18C23425D26827F29B2CE35E36F37839A3CD45C46748F4AB4DE56B57A58969D6AC79E7BC8AE8BD9CFADFBEF",
 "12913D14C15F16718A1BE23425627F28E2AB2CD35B36A37839C3EF45A46B47E48F49D57958C5DE68D69F6CE7AD7BC89B9AEACFBDF",
 "12513814B16917C1AD1EF23F24926B27D28E2AC34C35E36D37B39A4564784AF4DE57A58F59B5CD67F68A6CE79E89D8BC9CFABEBDF",
 "12513614718B19C1AF1DE23E24B26D27829F2AC34C35D37938F3AB4584694AE4DF56E57B59A5CF67C68A6BF7AD7EF89E8CD9BDBCE",
 "12613C14F15E17819A1BD23A24527B28D29C2EF34735B36938F3DE46E48C49D4AB56F57A5895CD67D68B6AC79E7CF8AE9BFADFBCE",
 "12314D15F1671891AE1BC24C25726F28A29E2BD34B35637F38E39A3CD45A4694784EF58C59B5DE68D6AB6CE79D7AC7BE8BF9CFADF",
 "12314B15617F18D19A1CE24E25F2672892AD2BC34C35736F38A39D3BE45A4694784DF58C59B5DE68E6AB6CD79E7AC7BD8BF9CFAEF",
 "12314615817A19B1CD1EF24725926A28B2CE2DF34A35B3673893CF3DE45F48E49D4BC56E57D5AC68F69C6BD78C79F7BE8AD9AEABF",
 "12314516817F19A1BC1DE24725F26A2892BE2CD34F35736938A3BD3CE46D48E49B4AC56E58D59C5AB67C6BF78B79E7AD8CF9DFAEF",
 "12314516718C19F1AB1DE24925F26B27A28D2CE34F35936A37B38E3CD46D47E48B4AC56E57D58A5BC6896CF78F79C9AE9BDADFBEF",
 "12314516817A19B1CD1EF24725A26928B2CE2DF34A35736B3893CF3DE46F48E49D4BC56E58F59C5BD67D6AC78C79F7BE8AD9AEABF",
 "12314516718C19F1AB1DE24F25926A27B28D2CE34935F36B37A38E3CD46E47D48B4AC56D57E58A5BC6896CF78F79C9AD9BEAEFBDF",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46E47F4AC4BD56F57E5AD5BC68C69D78D79C8AE8BF9AF9BE",
 "12314516718A19B1CD1EF24825A26927B2CE2DF34A35836B3793CF3DE46F47E49D4BC56E57F59C5BD68D6AC78C7AD89F8BE9AEABF",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46E47F4AC4BD56F57E5AD5BC68C69D78D79C8AE8BF9AF9BE",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46E47F4AC4BD56F57E5AD5BC68C69D78D79C8AE8BF9AF9BE",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46E47F4AC4BD56F57E5AD5BC68C69D78D79C8AE8BF9AF9BE",
 "1231451671891AC1BE1DF24925826C27A2BD2EF34835936A37C3BF3DE46E47B4AD4CF56B57E5AF5CD68D69F78F79D8AE8BC9AB9CE",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46E47F4AC4BD56F57E5AD5BC68C69D78D79C8AE8BF9AF9BE",
 "1231451671891AB1CE1DF24825926A27B2CD2EF34935836B37A3CF3DE46F47D4AE4BC56D57F5AC5BE68E69C78C79E8AF8BD9AD9BF",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46E47F4AC4BD56F57E5AD5BC68C69D78D79C8AE8BF9AF9BE",
 "1231451671891AC1BD1EF24A25C26E27F28D29B34C35A36F37E38B39D4684794BF4DE5695785BE5DF6AD6BC7AB7CD8AE8CF9AF9CE",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46C47D4AE4BF56D57C5AF5BE68E69F78F79E8AC8BD9AD9BC",
 "1231451671891AB1CD1EF24A25B26E27F28C29D34B35A36F37E38D39C4684794CE4DF5695785CF5DE6AC6BD7AD7BC8AE8BF9AF9BE",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24825926A27C2BF2DE34935836C37A3BE3DF46B47D4AF4CE56D57B5AE5CF68F69E78E79F8AB8CD9AD9BC",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46C47D4AE4BF56D57C5AF5BE68E69F78F79E8AC8BD9AD9BC",
 "1231451671891AB1CE1DF24825926A27B2CD2EF34935836B37A3CF3DE46C47E4AD4BF56E57C5AF5BD68D69F78F79D8AC8BE9AE9BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46C47D4AE4BF56D57C5AF5BE68E69F78F79E8AC8BD9AD9BC",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46C47D4AE4BF56D57C5AF5BE68E69F78F79E8AC8BD9AD9BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CE1DF24A25B2682792CD2EF34B35A3693783CF3DE46D47F48C49E56F57D58E59C6AC6BE7AE7BC8AD8BF9AF9BD",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46C47D4AE4BF56D57C5AF5BE68E69F78F79E8AC8BD9AD9BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48D49B4AF4CE58B59D5AE5CF68F69E6AD6BC78E79F7AB7CD",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46C47D4AE4BF56D57C5AF5BE68E69F78F79E8AC8BD9AD9BC",
 "1231451671891AB1CE1DF24A25B2682792CD2EF34B35A3693783CF3DE46E47C48F49D56C57E58D59F6AF6BD7AD7BF8AE8BC9AC9BE",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CD1EF24A25B2682792CE2DF34B35A3693783CF3DE46C47D48E49F56D57C58F59E6AE6BF7AF7BE8AC8BD9AD9BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24A25C2682792BE2DF34C35A3693783BF3DE46E47F48B49D56F57E58D59B6AB6CD7AD7BC8AE8CF9AF9CE",
 "1231451671891AB1CD1EF24A25B2682792CE2DF34B35A3693783CF3DE46C47D48E49F56D57C58F59E6AE6BF7AF7BE8AC8BD9AD9BC",
 "1231451671891AC1BD1EF24E25F26A27C28D29B34F35E36C37A38B39D46B47D48C49A56D57B58A59C68F69E78E79FABEADFBCFCDE",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AB1CD1EF24825926A27B2CE2DF34935836B37A3CF3DE46C47D4AE4BF56D57C5AF5BE68E69F78F79E8AC8BD9AD9BC",
 "1231451671891AC1BE1DF24825926D27F2AB2CE34935836F37D3AE3BC46C47A4BF4DE56A57C5BD5EF68E69B78B79E8AF8CD9AD9CF",
 "1231451671891AB1CE1DF24A25B2682792CF2DE34B35A3693783CD3EF46E47C48D49F56C57E58F59D6AD6BF7AF7BD8AE8BC9AC9BE",
 "1231451671891AC1BD1EF24E25F26A27C28D29B34F35E36C37A38B39D46D47B48A49C56B57D58C59A68E69F78F79EABFADEBCECDF",
 "1231451671891AB1CD1EF24A25B2682792CE2DF34B35A3693783CF3DE46C47D48E49F56D57C58F59E6AE6BF7AF7BE8AC8BD9AD9BC",
 "1231451671891AC1BD1EF24E25F26A27C28D29B34F35E36C37A38B39D46B47D48C49A56D57B58A59C68F69E78E79FABEADFBCFCDE",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BE1DF24825926D27F2AB2CE34935836F37D3AE3BC46C47A4BF4DE56A57C5BD5EF68E69B78B79E8AF8CD9AD9CF",
 "1231451671891AB1CE1DF24A25B2682792CD2EF34B35A3693783CF3DE46E47C48F49D56C57E58D59F6AF6BD7AD7BF8AE8BC9AC9BE",
 "1231451671891AC1BD1EF24A25C2682792BE2DF34C35A3693783BF3DE46E47F48B49D56F57E58D59B6AB6CD7AD7BC8AE8CF9AF9CE",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AC1BD1EF24D25B2682792AE2CF34B35D3693783AF3CE46E47F48A49C56F57E58C59A6AD6BC7AB7CD8BF8DE9BE9DF",
 "1231451671891AB1CD1EF24A25B2682792CE2DF34B35A3693783CF3DE46C47D48E49F56D57C58F59E6AE6BF7AF7BE8AC8BD9AD9BC",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46F47E48A49C56E57F58C59A6AB6CD7AD7BC8BF8DE9BE9DF",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "12314516718F19A1BC1DE24F25826D27E29B2AC34835F36E37D39C3AB46947A4BD4CE56A5795BE5CD68C6BF78B7CF89E8AD9DFAEF",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "12314516718B19F1AC1DE24B25826927F2AD2CE34835B36F3793AE3CD46A47C49D4EF56C57A59E5DF68E6BD78D7BE89C8AF9ABBCF",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "12314516718D19A1BC1EF24D25826F27E29B2AC34835D36E37F39C3AB46947A4BF4CE56A5795BE5CF68C6BD78B7CD89E8AF9DFADE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "12314516718D19A1BC1EF24B25C26D27829F2AE34C35B36837D39E3AF46F47E48A49D56E57F5895AD69B6AC79C7AB8BE8CFBDFCDE",
 "12413815617D19A1BC1EF23D25926A2782BE2CF34735F36E39C3AB45A46948D4BF4CE57B58E5CD67C68F6BD79E7AF89B8AC9DFADE",
 "12513C14D1691781AF1BE23724628C29D2AE2BF34B35836F39A3DE45947F48A4CE56D57C5AB5EF67B68E6AC79E7AD89B8DF9CFBCD",
 "12413B15916718F1AE1CD23C25726928E2AF2BD34D35E36F37839A45647948A4BC4EF58C5AB5DF68B6AC6DE7AD7BF7CE89D9BE9CF",
 "1241351671891AB1CD1EF23D25C2682792AE2BF34C36E37F38A39B45D4694784AF4BE56F57E58B59A6AD6BC7AC7BD8CF8DE9CE9DF",
 "1231451671891AC1BD1EF24B25D2682792AF2CE34D35B3693783AE3CF46E47F48C49A56F57E58A59C6AD6BC7AB7CD8BE8DF9BF9DE",
 "1231451671891AB1CD1EF24C25D2682792AE2BF34D35C3693783AF3BE46E47F48A49B56F57E58B59A6AC6BD7AD7BC8CE8DF9CF9DE",
 "12314B15916718F1AE1CD24D25627928A2BC2EF34C35736938E3AF3BD45E46F47849A58C5AB5DF68B6AC6DE7AD7BF7CE89D9BE9CF",
 "12B13714A15618D19C1EF23C24E25D2682792AF34D35E36F38A39B45C4694784BF57F58B59A67E6AC6BD7AD7BC89E8CF9DFABECDE",
 "12C13A14715618D19B1EF23E24D25B2692782AF34B35D3683793CF45E46F48C49A57F58A59C67E6AD6BC7AB7CD89E8BF9DFACEBDE")

def nacs15build():
  """nacs15build()
     Build Nacs15 from Nac15Names for examples of each subalgebra."""
  nacList = []
  for sa,nac in Nac15Names.items():
    if nac[1] >= len(Triads15parts):
      print("Triads15Load needed for %d at %d" %(sa, nac[1]))
      tri = ""
    else:
      tri = Triads15parts[nac[1]][nac[2]]
      triad = list(str2tri(tri).allSigns(36))[nac[3]]
      tmp = len(list(Lib.triadDump(Tensor.Triads(*triad.spin(f15Basis)) \
            .assocTriads(f15Basis,True),f15Basis,1)))
      if tmp != sa:
        print("Triads15 for %d is invalid %d" %(sa, tmp))
        tri = ""
    nacList.append(tri)
  return nacList

def nac15map(triads):
  """nac15map(triads)
     Don't have remainders so just check all signed triads subalgs in nac15Names."""
  if idx < 0 or idx >= len(Triads15):
    raise Exception("Invalid nac15Map Triads15 index")
  global Nac15Name
  nacMap = set(Nac15Name.keys())
  nac = {}
  cnt = len(nacMap)
  for idx,triad in enumerate(triads):
    if Lib.checkMem(idx, 1000, extra=cnt):
      break
    for sgn,tri in str2tri(triad).allSigns(36):
      tmp = len(list(Lib.triadDump(Tensor.Triads(*(tri).spin(f15Basis)) \
                             .assocTriads(f15Basis,True),f15Basis,1)))
      if tmp not in nacMap:
        cnt += 1
        nacMap.append(tmp)
        found = -1
        pos = idx
        for offs,var in enumerate(Triads15parts):
          if triad in var:
            found = offs
            pos = var.index(triad)
            break
        nac[tmp] = ("", found, pos, sgn)
        print("Not in Map", tmp, nac[tmp])
  Lib.checkMem(idx, extra=cnt, finish=True)
  return nac

def tri2str(tri):
  return "".join(list(x[0][1:] for x in tri.copyTerms()))

def str2tri(str):
  ca = CA()
  for x in range(0,len(str),3):
    ca += CA.Eval(("e" +str[x:x+3],1))
  return ca

PS15 = CA.Basis(15,0,15)[0]
F15 = list(CA.Eval(term) for term in str2tri(tris0[0]).copyTerms())
FF15 = -PS15 *Tensor(F15)
P15 = e12478BDE +e12479ACF +e12568BCF +e12569ADE +e13468ADF +e13469BCE +e13578ACE \
     +e13579BDF +e234589EF +e2345ABCD +e236789CD +e2367ABEF +e456789AB +e4567CDEF +e89ABCDEF 

# Octonians have f*f+7==+-6e1234567*f. Spin7R is a Spin(7) subset.
# with f*f+7 == +-2*f' +<one term>
def triadsShalf(idx):
  """triadsShalf(idx)
     Yield Sedenion Triads15[idx].allSigns(<64), 64..127 are minus these."""
  if idx < 0 or idx >= len(Triads15):
    raise Exception("Invalid triadsShalf Triads15 index")
  for phi in str2tri(Triads15[idx]).allSigns(True):
    if len(list(Lib.triadDump(Tensor.Triads(*phi.spin(f15Basis)) \
                          .assocTriads(f15Basis,True), f15Basis,1))) == 252:
      yield phi

def triads15all(idx, pos=0):
  """triads15all(idx, [pos])
     Enumerate all signed terms of Triads15[idx] and return pos index."""
  Lib._checkType(idx, int, "triads15all")
  Lib._checkType(pos, int, "triads15all")
  if idx <0 or idx > len(Triads15) or pos < 0 or pos > 32767:
    raise Exception("Invalid input range in triads15all: %d,%d" %(idx,pos))
  return list(str2tri(Triads15[idx]).allSigns(36))[pos]

def triads15terms(idx, pos=0):
  """triads15terms(idx, [pos])
     Return triads15all(idx,pos) as a Tensor of Eval(copyTerms)."""
  Lib._checkType(idx, int, "triads15terms")
  Lib._checkType(pos, int, "triads15terms")
  if idx <0 or idx > len(Triads15) or pos < 0 or pos > 32767:
    raise Exception("Invalid input range in triads15terms: %d,%d" %(idx,pos))
  return Tensor(list(CA(**dict([x])) for x in triads15all(idx,pos).copyTerms()))

def triads15remain(phi):
  """triad15remain(phi)
     Return remainder of phi assuming correct parity. TBD"""
  Lib._checkType(phi, CA, "triads15remain")
  raise Exception("No remainder formula")

def triads15class(phi, id=False):
  """triad15class(phi, [id])
     Classify phi as <class=R/S/T/U/V/W/O> with parity & index in 30:128."""
  Lib._checkType(phi, CA, "triads15class")
  Lib._checkType(id, bool, "triads15class")
  aPhi = tri2str(abs(phi))
  if aPhi not in Triads15:
    raise Exception("Abs. input phi to triads15class not found in Triads15")
  idx = Triads15.index(aPhi)
  idxSign,parity = phi.allSignsIndices()
  sgn = -1 if parity %2 else 1
  nac = nac15subalg(aPhi, idxSign)
  clsName = Nac15Name[nac]
  if id:
    return (clsName, -sgn, idx, int(idxSign))
  return "%s%s:%0.5f" %(clsName, "-" if parity %2 else "+", idx +idxSign/100000.0)

S15 = (-e456789ABCDEF, -e236789ABCDEF, -e234589ABCDEF, -e234567ABCDEF, -e23456789CDEF, -e23456789ABEF, -e23456789ABCD, -e135789ABCDEF, -e134689ABCDEF, -e1345679BCDEF, -e1345678ACDEF, -e13456789ABDF, -e13456789ABCE, -e125689ABCDEF, -e124789ABCDEF, -e1245679ACDEF, -e1245678BCDEF, -e12456789ABDE, -e12456789ABCF, -e1235679ABDEF, -e1235678ABCEF, -e12356789BCDF, -e12356789ACDE, -e1234679ABCEF, -e1234678ABDEF, -e12346789BCDE, -e12346789ACDF, -e1234579ABCDF, -e1234578ABCDE, -e12345789BDEF, -e12345789ACEF, -e1234569ABCDE, -e1234568ABCDF, -e12345689BCEF, -e12345689ADEF)
# S15**2 -35
SS15 = -2e1247 -2e1256 -2e128B -2e129A -2e12CF -2e12DE -2e1346 +6e1357 -2e138A +6e139B -2e13CE +6e13DF -2e148D -2e149C -2e14AF -2e14BE -2e158C +6e159D -2e15AE +6e15BF -2e168F -2e169E -2e16AD -2e16BC -2e178E +6e179F -2e17AC +6e17BD -2e2345 -2e2367 -2e2389 -2e23AB -2e23CD -2e23EF -2e248E -2e249F -2e24AC -2e24BD -2e258F -2e259E -2e25AD -2e25BC -2e268C -2e269D +6e26AE +6e26BF -2e278D -2e279C +6e27AF +6e27BE -2e348F -2e349E -2e34AD -2e34BC -2e358E -2e359F -2e35AC -2e35BD -2e368D -2e369C +6e36AF +6e36BE -2e378C -2e379D +6e37AE +6e37BF -2e4567 -2e4589 -2e45AB -2e45CD -2e45EF -2e468A -2e469B -2e46CE -2e46DF -2e478B -2e479A -2e47CF -2e47DE -2e568B -2e569A -2e56CF -2e56DE -2e578A -2e579B -2e57CE -2e57DF -2e6789 -2e67AB -2e67CD -2e67EF -2e89AB -2e89CD -2e89EF -2e8ACE -2e8ADF -2e8BCF -2e8BDE -2e9ACF -2e9ADE -2e9BCE -2e9BDF -2eABCD -2eABEF -2eCDEF

#X=sum(F15).allSigns(True) # with [20] being Sedenions
#for x in X: print(len(Tensor.Triads(*x.spin(f15Basis)).assocCycles(f15Basis,nonAssoc=True)))
na15 = (210, 210, 210, 210, 210, 210, 210, 210, 224, 200, 224, 200, 224, 200, 208, 208, 208, 208, 208, 208, 252, 228, 204, 180, 236, 236, 188, 188, 220, 196, 220, 196, 204, 204, 204, 204)
ia15 = (245, 245, 245, 245, 245, 245, 245, 245, 231, 255, 231, 255, 231, 255, 247, 247, 247, 247, 247, 247, 203, 227, 251, 275, 219, 219, 267, 267, 235, 259, 235, 259, 251, 251, 251, 251)
FF15 = (e12345689ADEF, e12345689BCEF, e1234568ABCDF, e1234569ABCDE, e12345789ACEF, e12345789BDEF, e1234578ABCDE, e1234579ABCDF, e12346789ACDF, e12346789BCDE, e1234678ABDEF, e1234679ABCEF, e12356789ACDE, e12356789BCDF, e1235678ABCEF, e1235679ABDEF, e12456789ABCF, e12456789ABDE, e1245678BCDEF, e1245679ACDEF, e124789ABCDEF, e125689ABCDEF, e13456789ABCE, e13456789ABDF, e1345678ACDEF, e1345679BCDEF, e134689ABCDEF, e135789ABCDEF, e23456789ABCD, e23456789ABEF, e23456789CDEF, e234567ABCDEF, e234589ABCDEF, e236789ABCDEF, e456789ABCDEF)
#FF15 = -e123456789ABCDEF *sum(FF15) # x=list(sum(F15).allSigns(21))[20] # x:35 -> xx:105 -> 33 terms:
#FFF1520 = sum(map(lambda x: CA(**dict([x])) if abs(x[1]) == 6 else 0, (x*x).copyTerms())).copyTerms()
FFF1520 = (-e1357, -e139B, -e13DF, e148D, e149C, e158C, -e159D, -e15BF, -e179F, -e17BD, e248E, e24AC, e268C, -e26AE, -e26BF, -e27AF, -e27BE, e348F, e34BC, -e36AF, -e36BE, e378C, -e37AE, -e37BF, e4589, e45CD, e468A, e46CE, e478B, e47CF, e89CD, e8ACE, e8BCF)
FFFF1520 = (-e1357, -e139B, -e13DF, -e15BF, -e179F, -e17BD, -e37BF, +e579B)
FFFFF1520 = (e1247, e1256, e128B, e129A, e12CF, e12DE, e1346, e138A, e13CE, e14AF, e14BE, e15AE, e168F, e169E, e16AD, e16BC, e178E, e17AC, e2345, e2367, e2389, e23AB, e23CD, e23EF, e249F, e24BD, e258F, e259E, e25AD, e25BC, e269D, e278D, e279C, e349E, e34AD, e358E, e359F, e35AC, e35BD, e368D, e369C, e379D, e4567, e45AB, e45EF, e469B, e46DF, e479A, e47DE, e568B, e569A, e56CF, e56DE, e578A, e579B, e57CE, e57DF, e6789, e67AB, e67CD, e67EF, e89AB, e89EF, e8ADF, e8BDE, e9ACF, e9ADE, e9BCE, e9BDF, eABCD, eABEF, eCDEF)

# Tensor.Table(O.Basis(4)).morph(O.Basis(4),f15Basis).dump(f15Basis)
SE15 = Tensor( \
 ("-1","-f3", "f2","-f5", "f4", "f7","-f6","-f9", "f8", "fB","-fA", "fD","-fC","-fF", "fE"),
 ( "f3", "-1","-f1","-f6","-f7", "f4", "f5","-fA","-fB", "f8", "f9", "fE", "fF","-fC","-fD"),
 ("-f2", "f1", "-1","-f7", "f6","-f5", "f4","-fB", "fA","-f9", "f8", "fF","-fE", "fD","-fC"),
 ( "f5", "f6", "f7", "-1","-f1","-f2","-f3","-fC","-fD","-fE","-fF", "f8", "f9", "fA", "fB"),
 ("-f4", "f7","-f6", "f1", "-1", "f3","-f2","-fD", "fC","-fF", "fE","-f9", "f8","-fB", "fA"),
 ("-f7","-f4", "f5", "f2","-f3", "-1", "f1","-fE", "fF", "fC","-fD","-fA", "fB", "f8","-f9"),
 ( "f6","-f5","-f4", "f3", "f2","-f1", "-1","-fF","-fE", "fD", "fC","-fB","-fA", "f9", "f8"),
 ( "f9", "fA", "fB", "fC", "fD", "fE", "fF", "-1","-f1","-f2","-f3","-f4","-f5","-f6","-f7"),
 ("-f8", "fB","-fA", "fD","-fC","-fF", "fE", "f1", "-1", "f3","-f2", "f5","-f4","-f7", "f6"),
 ("-fB","-f8", "f9", "fE", "fF","-fC","-fD", "f2","-f3", "-1", "f1", "f6", "f7","-f4","-f5"),
 ( "fA","-f9","-f8", "fF","-fE", "fD","-fC", "f3", "f2","-f1", "-1", "f7","-f6", "f5","-f4"),
 ("-fD","-fE","-fF","-f8", "f9", "fA", "fB", "f4","-f5","-f6","-f7", "-1", "f1", "f2", "f3"),
 ( "fC","-fF", "fE","-f9","-f8","-fB", "fA", "f5", "f4","-f7", "f6","-f1", "-1","-f3", "f2"),
 ( "fF", "fC","-fD","-fA", "fB","-f8","-f9", "f6", "f7", "f4","-f5","-f2", "f3", "-1","-f1"),
 ("-fE", "fD", "fC","-fB","-fA", "f9","-f8", "f7","-f6", "f5", "f4","-f3","-f2", "f1", "-1"))

# Sedenions from Wikipedia (= Cawagas)
# SE15.search(f15Basis,SO15,initPerm=[1, 2, -3, 6, 7, 4, 5]) -> FOUND at 4107 [..., -8, 9, 10, -11, 14, 15, 12, 13]
# Tensor.Table(O.Basis(4)).isomorph(O.Basis(4),[1, 2, -3, 6, 7, 4, 5, -8, 9, 10, -11, 14, 15, 12, 13]).morph(O.Basis(4),f15Basis)
# (f1, f2,  f3,  f4,  f5,   f6, f7,   f8, f9,  fA,   fB,   fC,   fD,    fE,  fF)
# (o1, o2, -o12, o23, o123, o3, o13, -o4, o14, o24, -o124, o234, o1234, o34, o134)
SO15 = Tensor( \
 ("-1", "f3",  "-f2","f5",  "-f4", "-f7", "f6",  "f9",  "-f8", "-fB", "fA",  "-fD", "fC",  "fF",  "-fE"),
 ("-f3","-1",  "f1", "f6",  "f7",  "-f4", "-f5", "fA",  "fB",  "-f8", "-f9", "-fE", "-fF", "fC",  "fD"),
 ("f2", "-f1", "-1", "f7",  "-f6", "f5",  "-f4", "fB",  "-fA", "f9",  "-f8", "-fF", "fE",  "-fD", "fC"),
 ("-f5","-f6", "-f7","-1",  "f1",  "f2",  "f3",  "fC",  "fD",  "fE",  "fF",  "-f8", "-f9", "-fA", "-fB"),
 ("f4", "-f7", "f6", "-f1", "-1",  "-f3", "f2",  "fD",  "-fC", "fF",  "-fE", "f9",  "-f8", "fB",  "-fA"),
 ("f7", "f4",  "-f5","-f2", "f3",  "-1",  "-f1", "fE",  "-fF", "-fC", "fD",  "fA",  "-fB", "-f8", "f9"),
 ("-f6","f5",  "f4", "-f3", "-f2", "f1",  "-1",  "fF",  "fE",  "-fD", "-fC", "fB",  "fA",  "-f9", "-f8"),
 ("-f9","-fA", "-fB","-fC", "-fD", "-fE", "-fF", "-1",  "f1",  "f2",  "f3",  "f4",  "f5",  "f6",  "f7"),
 ("f8", "-fB",  "fA","-fD", "fC",  "fF",  "-fE", "-f1", "-1",  "-f3", "f2",  "-f5", "f4",  "f7",  "-f6"),
 ("fB", "f8",  "-f9","-fE", "-fF", "fC",  "fD",  "-f2", "f3",  "-1",  "-f1", "-f6", "-f7", "f4",  "f5"),
 ("-fA","f9",  "f8", "-fF", "fE",  "-fD", "fC",  "-f3", "-f2", "f1",  "-1",  "-f7", "f6",  "-f5", "f4"),
 ("fD", "fE",  "fF", "f8",  "-f9", "-fA", "-fB", "-f4", "f5",  "f6",  "f7",  "-1",  "-f1", "-f2", "-f3"),
 ("-fC","fF",  "-fE","f9",  "f8",  "fB",  "-fA", "-f5", "-f4", "f7",  "-f6", "f1",  "-1",  "f3",  "-f2"),
 ("-fF","-fC", "fD", "fA",  "-fB", "f8",  "f9",  "-f6", "-f7", "-f4", "f5",  "f2",  "-f3", "-1",  "f1"),
 ("fE", "-fD", "-fC","fB",  "fA",  "-f9", "f8",  "-f7", "f6",  "-f5", "-f4", "f3",  "f2",  "-f1", "-1"))

phi15 = e123 +e145 +e167 +e189 +e1AB +e1CD +e1EF +e246 +e257 +e28A +e29B +e2CE +e2DF +e347 +e356 +e38B +e39A \
       +e3CF +e3DE -e48C +e49D +e4AE +e4BF +e58D +e59C +e5AF +e5BE +e68E +e69F +e6AC +e6BD +e78F +e79E +e7AD +e7BC

