########################################
## Extend G2 construction to Spin(15)
## File: spin15.ca - G.P.Wilmot
####################################
from multiprocessing import Process
import time
try:
  from multiprocessing import shared_memory
except:
  shared_memory = None

_spin15 = """Extend G2 construction to Spin(15). Module contains variables:
   f15Basis, Triads15_0, Triads15, Backup15, tris0, Triads15parts, Nacs15map_0,
   Nacs15names, Nacs15, Nacs15mirrors, PS15, F15, FF15, P!%, PP15, S15, SS15,
   na15, F(*3,4,5)1520, SE15, SO15, phi15
 and functions:
   tri2str, str2tri, triads15load, loadCa, saveCa, taskTriads15build,
   triads15build, triads15parts, nacs15subalg, nacs15map, taskNacs15build,
   nacs15build, nacs15parts, nacs15mirrors, triadsShalf, triads15all,
   triads15terms, triads15remain, triads15class."""

# From CA(15) find 64.8E6 14-simplex primaries to iuncover sub-sedenion algs.
Triads15gen = (CA.Eval(x) for x in Lib.triads(15)) # Too big and slow hence:
# Create Triads15[0] and rotate using triads15build() to find the first 105
# rotations 106 unique primaries stored in Triads15 (= tris0).
# Decode using str2tri() and encode with tri2str() to save RAM.
# Then use triads15parts(path="data") to build and save the rest.
# Load all these primaries with triads15load(path="data") from files
# spin15-triads{1,2,3?,4?,5?,6}.ca where ?=a,b,c... as 2E6 primaries each
# due to Windows can't load more in a timely fashion. This is actually a nice
# chunk size to generate new primaries and then use nacs15parts(path="data")
# to find sedonions and the 100 sub-sedenion algebras.
# Trying to read triads & expand 100k is >20MB and python exec blows up RAM
# more than size of structure! Hence use tri2str to store. Too big is > 13E6.
# so chunk files.
#
# On the Adelaide Uni Pheonix HPC iceman system with 72 nodes triads15parts()
# takes 2.8 days and nacs15parts() takes 1.6 days.
#

f15Basis = Tensor(("f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9",
                   "fA", "fB", "fC", "fD", "fE", "fF"))
 
Triads15_0 = e123+e145+e167+e189+e1AB+e1CD+e1EF+e246+e257+e28A+e29B+e2CE+e2DF \
            +e347+e356+e38B+e39A+e3CF+e3DE+e48C+e49D+e4AE+e4BF+e58D+e59C+e5AF \
            +e5BE+e68E+e69F+e6AC+e6BD+e78F+e79E+e7AD+e7BC

if "Triads15" in globals():
  Backup15 = Triads15
Triads15 = [ \
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CF2DE34735638B39A3CE3DF48C49D4AF4BE58D59C5AE5BF68F69E6AC6BD78E79F7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CF2DE34735638B39A3CE3DF48D49C4AE4BF58C59D5AF5BE68E69F6AD6BC78F79E7AC7BD",
 "1231451671891AB1CD1EF24625728B29A2CE2DF34735638A39B3CF3DE48C49D4AF4BE58D59C5AE5BF68E69F6AD6BC78F79E7AC7BD",
 "1231451671891AB1CD1EF24625728B29A2CE2DF34735638A39B3CF3DE48D49C4AE4BF58C59D5AF5BE68F69E6AC6BD78E79F7AD7BC",
 "1231451671891AB1CD1EF24725628A29B2CE2DF34635738B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68F69E6AD6BC78E79F7AC7BD",
 "1231451671891AB1CD1EF24725628A29B2CE2DF34635738B39A3CF3DE48D49C4AF4BE58C59D5AE5BF68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CD1EF24725628B29A2CF2DE34635738A39B3CE3DF48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CE1DF24625728A29B2CD2EF34735638B39A3CF3DE48C49E4AD4BF58E59C5AF5BD68D69F6AC6BE78F79D7AE7BC",
 "1231451671891AB1CE1DF24625728A29B2CD2EF34735638B39A3CF3DE48F49D4AE4BC58D59F5AC5BE68E69C6AF6BD78C79E7AD7BF",
 "1231451671891AB1CF1DE24625728A29B2CE2DF34735638B39A3CD3EF48C49F4AE4BD58F59C5AD5BE68E69D6AC6BF78D79E7AF7BC",
 "1231451671891AB1CF1DE24625728A29B2CE2DF34735638B39A3CD3EF48E49D4AC4BF58D59E5AF5BC68C69F6AE6BD78F79C7AD7BE",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728D29B2AF2CE34735638B39D3AE3CF48C49A4BF4DE58A59C5BE5DF68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AD1BC1EF24625728A29D2BF2CE34735638D39A3BE3CF48C49B4AE4DF58B59C5AF5DE68E69F6AC6BD78F79E7AB7CD",
 "1231451671891AD1BC1EF24625728C29B2AE2DF34735638B39C3AF3DE48A49D4BF4CE58D59A5BE5CF68E69F6AC6BD78F79E7AB7CD",
 "1231451671891AE1BF1CD24625728A29E2BC2DF34735638E39A3BD3CF48C49D4AB4EF58D59C5AF5BE68B69F6AC6DE78F79B7AD7CE",
 "1231451671891AE1BF1CD24625728F29B2AD2CE34735638B39F3AC3DE48C49D4AB4EF58D59C5AF5BE68E69A6BD6CF78A79E7BC7DF",
 "1231451671891AF1BE1CD24625728A29F2BD2CE34735638F39A3BC3DE48C49D4AE4BF58D59C5AB5EF68E69B6AC6DF78B79E7AD7CF",
 "1231451671891AF1BE1CD24625728E29B2AC2DF34735638B39E3AD3CF48C49D4AE4BF58D59C5AB5EF68A69F6BD6CE78F79A7BC7DE",
 "12314516718A19B1CD1EF2462572892AB2CE2DF34735638B39A3CF3DE48C49E4AD4BF58D59F5AC5BE68E69C6AF6BD78F79D7AE7BC",
 "12314516718A19B1CD1EF2462572892AB2CE2DF34735638B39A3CF3DE48F49D4AE4BC58E59C5AF5BD68D69F6AC6BE78C79E7AD7BF",
 "12314516718B19A1CD1EF24625728A29B2CE2DF3473563893AB3CF3DE48C49F4AE4BD58D59E5AF5BC68E69D6AC6BF78F79C7AD7BE",
 "12314516718B19A1CD1EF24625728A29B2CE2DF3473563893AB3CF3DE48E49D4AC4BF58F59C5AD5BE68C69F6AE6BD78D79E7AF7BC",
 "12314516718C19D1AB1EF24625728A29E2BC2DF34735638B39F3AC3DE4894AE4BF4CD58D59C5AF5BE68E69A6BD6CF78F79B7AD7CE",
 "12314516718C19D1AB1EF24625728F29B2AD2CE34735638E39A3BD3CF4894AE4BF4CD58D59C5AF5BE68B69F6AC6DE78A79E7BC7DF",
 "12314516718D19C1AB1EF24625728A29F2BD2CE34735638B39E3AD3CF48C49D4AE4BF5895AF5BE5CD68E69B6AC6DF78F79A7BC7DE",
 "12314516718D19C1AB1EF24625728E29B2AC2DF34735638F39A3BC3DE48C49D4AE4BF5895AF5BE5CD68A69F6BD6CE78B79E7AD7CF",
 "12314516718E19F1AB1CD24625728A29C2BE2DF34735638B39D3AE3CF48C49A4BF4DE58D59B5AF5CE6896AC6BD6EF78F79E7AD7BC",
 "12314516718E19F1AB1CD24625728D29B2AF2CE34735638C39A3BF3DE48B49D4AE4CF58A59C5BE5DF6896AC6BD6EF78F79E7AD7BC",
 "12314516718F19E1AB1CD24625728A29D2BF2CE34735638B39C3AF3DE48C49B4AE4DF58D59A5BE5CF68E69F6AC6BD7897AD7BC7EF",
 "12314516718F19E1AB1CD24625728C29B2AE2DF34735638D39A3BE3CF48A49D4BF4CE58B59C5AF5DE68E69F6AC6BD7897AD7BC7EF",
 "1231451681791AB1CD1EF24625827A29B2CE2DF34835637B39A3CF3DE47C49D4AE4BF57D59C5AF5BE67E69F6AC6BD78F89E8AD8BC",
 "1231451681791AB1CD1EF24925726B28A2CE2DF34735936A38B3CF3DE46D48C4AE4BF56C58D5AF5BE67E69F78F7AD7BC89E9AC9BD",
 "1231451691781AB1CD1EF24625927B28A2CE2DF34935637A38B3CF3DE47D48C4AE4BF57C58D5AF5BE67F68E6AC6BD79E89F9AD9BC",
 "1231451691781AB1CD1EF24825726A29B2CE2DF34735836B39A3CF3DE46C49D4AE4BF56D59C5AF5BE67F68E79E7AD7BC89F8AC8BD",
 "12314516A17B1891CD1EF24625A27829B2CE2DF34A35637938B3CF3DE47E48C49D4BF57F58D59C5BE67C68E69F6BD7AD8AF9AEABC",
 "12314516A17B1891CD1EF24B25726928A2CE2DF34735B36839A3CF3DE46F48C49D4AE56E58D59C5AF67C6BD78F79E7AD8BE9BFABC",
 "12314516B17A1891CD1EF24625B27928A2CE2DF34B35637839A3CF3DE47F48C49D4AE57E58D59C5AF67D68E69F6AC7BC8BF9BEABD",
 "12314516B17A1891CD1EF24A25726829B2CE2DF34735A36938B3CF3DE46E48C49D4BF56F58D59C5BE67D6AC78F79E7BC8AE9AFABD",
 "12314516C17D1891AB1EF24625C27E28A29B2DF34C35637F38B39A3DE47849D4AE4BF57958D5AF5BE67A68E69F6BD7BC8CF9CEACD",
 "12314516C17D1891AB1EF24D25726F28A29B2CE34735D36E38B39A3CF46948C4AE4BF56859C5AF5BE67A6BD78F79E7BC8DE9DFACD",
 "12314516D17C1891AB1EF24625D27F28A29B2CE34D35637E38B39A3CF47948C4AE4BF57859C5AF5BE67B68E69F6AC7AD8DF9DEBCD",
 "12314516D17C1891AB1EF24C25726E28A29B2DF34735C36F38B39A3DE46849D4AE4BF56958D5AF5BE67B6AC78F79E7AD8CE9CFBCD",
 "12314516E17F1891AB1CD24625E27C28A29B2DF34E35637D38B39A3CF47A48C49D4BF57B58D59C5AF67869F6AC6BD79E8EFADEBCE",
 "12314516E17F1891AB1CD24F25726D28A29B2CE34735F36C38B39A3DE46B48C49D4AE56A58D59C5BE67869F79E7AD7BC8EFACFBDF",
 "12314516F17E1891AB1CD24625F27D28A29B2CE34F35637C38B39A3DE47B48C49D4AE57A58D59C5BE67968E6AC6BD78F9EFADFBCF",
 "12314516F17E1891AB1CD24E25726C28A29B2DF34735E36D38B39A3CF46A48C49D4BF56B58D59C5AF67968E78F7AD7BC9EFACEBDE",
 "1231461571891AB1CD1EF24526728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58E59F5AC5BD68D69C6AF6BE78F79E7AD7BC",
 "1231461571891AB1CD1EF24526728A29B2CE2DF34735638B39A3CF3DE48F49E4AD4BC58D59C5AF5BE68E69F6AC6BD78C79D7AE7BF",
 "12314615718A19B1CE1DF2452672892AB2CD2EF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231471561891AB1CD1EF24625728A29B2CE2DF34536738B39A3CF3DE48C49D4AE4BF58F59E5AD5BC68E69F6AC6BD78D79C7AF7BE",
 "1231471561891AB1CD1EF24625728A29B2CE2DF34536738B39A3CF3DE48E49F4AC4BD58D59C5AF5BE68C69D6AE6BF78F79E7AD7BC",
 "12314715618B19A1CF1DE24625728A29B2CE2DF3453673893AB3CD3EF48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231481591671AB1CD1EF24625A27829B2CE2DF34735B36839A3CF3DE45C49D4AE4BF56E57F58D69F6AC6BD79E7AD7BC89C8AF8BE",
 "1231481591671AB1CD1EF24B25726928A2CE2DF34A35637938B3CF3DE45C46F47E49D58D5AF5BE68E6AC6BD78F7AD7BC89C9AE9BF",
 "1231491581671AB1CD1EF24625B27928A2CE2DF34735A36938B3CF3DE45D48C4AE4BF56F57E59C68E6AC6BD78F7AD7BC89D9AF9BE",
 "1231491581671AB1CD1EF24A25726829B2CE2DF34B35637839A3CF3DE45D46E47F48C59C5AF5BE69F6AC6BD79E7AD7BC89D8AE8BF",
 "12314A15B1671891CD1EF24625827A29B2CE2DF34735936A38B3CF3DE45E48C49D4BF56C57D5AF68E69F6BD78F79E7BC8AD9ACABE",
 "12314A15B1671891CD1EF24925726B28A2CE2DF34835637B39A3CF3DE45E46D47C4BF58D59C5AF68E69F6AC78F79E7AD8BC9BDABE",
 "12314B15A1671891CD1EF24625927B28A2CE2DF34735836B39A3CF3DE45F48C49D4AE56D57C5BE68E69F6AC78F79E7AD8BD9BCABF",
 "12314B15A1671891CD1EF24825726A29B2CE2DF34935637A38B3CF3DE45F46C47D4AE58D59C5BE68E69F6BD78F79E7BC8AC9ADABF",
 "12314C15D1671891AB1EF24625E27C28A29B2DF34735F36C38B39A3DE45849D4AE4BF56A57B59C68E69F6BD78F79E7AD8CDACFBCE",
 "12314C15D1671891AB1EF24F25726D28A29B2CE34E35637D38B39A3CF45846B47A49D59C5AF5BE68E69F6AC78F79E7BC8CDADEBDF",
 "12314D15C1671891AB1EF24625F27D28A29B2CE34735E36D38B39A3CF45948C4AE4BF56B57A58D68E69F6AC78F79E7BC9CDADFBDE",
 "12314D15C1671891AB1EF24E25726C28A29B2DF34F35637C38B39A3DE45946A47B48C58D5AF5BE68E69F6BD78F79E7AD9CDACEBCF",
 "12314E15F1671891AB1CD24625C27E28A29B2DF34735D36E38B39A3CF45A48C49D4BF5685795BE69F6AC6BD78F7AD7BC8DE9CEAEF",
 "12314E15F1671891AB1CD24D25726F28A29B2CE34C35637F38B39A3DE45A4694784BF58D59C5BE68E6AC6BD79E7AD7BC8CF9DFAEF",
 "12314F15E1671891AB1CD24625D27F28A29B2CE34735C36F38B39A3DE45B48C49D4AE5695785AF68E6AC6BD79E7AD7BC8DF9CFBEF",
 "12314F15E1671891AB1CD24C25726E28A29B2DF34D35637E38B39A3CF45B4684794AE58D59C5AF69F6AC6BD78F7AD7BC8CE9DEBEF",
 "1241351671891AB1CD1EF23625728A29B2CE2DF34738C39D3AE3BF45648B49A4CF4DE58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1241351671891AB1CD1EF23625728D29C2AF2BE34738B39A3CF3DE45648C49D4AE4BF58A59B5CE5DF68E69F6AC6BD78F79E7AD7BC",
 "12413516718E19F1AC1BD23625728A29B2CE2DF34738B39A3CF3DE45648C49D4AE4BF58D59C5AF5BE6896AB6CD6EF78F79E7AD7BC",
 "1251341671891AB1CD1EF23724628A29B2CE2DF35638D39C3AF3BE45748C49D4AE4BF58B59A5CF5DE68E69F6AC6BD78F79E7AD7BC",
 "1251341671891AB1CD1EF23724628C29D2AE2BF35638B39A3CF3DE45748A49B4CE4DF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "12513416718F19E1AD1BC23724628A29B2CE2DF35638B39A3CF3DE45748C49D4AE4BF58D59C5AF5BE68E69F6AC6BD7897AB7CD7EF",
 "1261371451891AB1CD1EF23425728A29B2CE2DF35638E39F3AC3BD46748C49D4AE4BF58D59C5AF5BE68B69A6CF6DE78F79E7AD7BC",
 "1261371451891AB1CD1EF23425728F29E2AD2BC35638B39A3CF3DE46748C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78A79B7CE7DF",
 "12613714518C19D1AE1BF23425728A29B2CE2DF35638B39A3CF3DE4674894AB4CD4EF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1271361451891AB1CD1EF23524628A29B2CE2DF34738F39E3AD3BC48C49D4AE4BF56758D59C5AF5BE68E69F6AC6BD78B79A7CF7DE",
 "1271361451891AB1CD1EF23524628E29F2AC2BD34738B39A3CF3DE48C49D4AE4BF56758D59C5AF5BE68A69B6CE6DF78F79E7AD7BC",
 "12713614518D19C1AF1BE23524628A29B2CE2DF34738B39A3CF3DE48C49D4AE4BF5675895AB5CD5EF68E69F6AC6BD78F79E7AD7BC",
 "1281391451671AB1CD1EF23A24625729B2CE2DF34C35D36E37F38B47849D4AE4BF56859C5AF5BE69F6AC6BD79E7AD7BC89A8CF8DE",
 "1281391451671AB1CD1EF23A24D25C26F27E29B34735638B3CF3DE46948C4AE4BF57958D5AF5BE68E6AC6BD78F7AD7BC89A9CE9DF",
 "12813914E15F16C17D1AB23A24625729B2CE2DF34735638B3CF3DE45A48C49D4BF58D59C5BE67A68E69F6BD78F79E7BC89AACDAEF",
 "1291381451671AB1CD1EF23B24625728A2CE2DF34D35C36F37E39A47948C4AE4BF56958D5AF5BE68E6AC6BD78F7AD7BC89B9CF9DE",
 "1291381451671AB1CD1EF23B24C25D26E27F28A34735639A3CF3DE46849D4AE4BF57859C5AF5BE69F6AC6BD79E7AD7BC89B8CE8DF",
 "12913814F15E16D17C1AB23B24625728A2CE2DF34735639A3CF3DE45B48C49D4AE58D59C5AF67B68E69F6AC78F79E7AD89BBCDBEF",
 "12A13B1451671891CD1EF23824625729B2CE2DF34E35F36C37D39A47A48C49D4BF56A58D59C5BE68E69F6BD78F79E7BC8ABACFADE",
 "12A13B1451671891CD1EF23824F25E26D27C29B34735639A3CF3DE46B48C49D4AE57B58D59C5AF68E69F6AC78F79E7AD8ABBCEBDF",
 "12A13B14C15D16E17F18923824625729B2CE2DF34735639A3CF3DE45849D4AE4BF59C5AF5BE67869F6AC6BD79E7AD7BC8AB8CD8EF",
 "12B13A1451671891CD1EF23924625728A2CE2DF34F35E36D37C38B47B48C49D4AE56B58D59C5AF68E69F6AC78F79E7AD9ABBCFBDE",
 "12B13A1451671891CD1EF23924E25F26C27D28A34735638B3CF3DE46A48C49D4BF57A58D59C5BE68E69F6BD78F79E7BC9ABACEADF",
 "12B13A14D15C16F17E18923924625728A2CE2DF34735638B3CF3DE45948C4AE4BF58D5AF5BE67968E6AC6BD78F7AD7BC9AB9CD9EF",
 "12C13D1451671891AB1EF23E24625728A29B2DF34835936A37B3CF47C49D4AE4BF56C58D5AF5BE68E69F6BD78F79E7AD8BC9ACCDE",
 "12C13D1451671891AB1EF23E24925826B27A2DF34735638B39A3CF46D48C4AE4BF57D59C5AF5BE68E69F6AC78F79E7BC8AD9BDCDE",
 "12C13D14A15B1681791EF23E24625728A29B2DF34735638B39A3CF45E48C49D4BF58D59C5AF67E69F6AC6BD78F7AD7BC89EABECDE",
 "12D13C1451671891AB1EF23F24625728A29B2CE34935836B37A3DE47D48C4AE4BF56D59C5AF5BE68E69F6AC78F79E7BC8BD9ADCDF",
 "12D13C1451671891AB1EF23F24825926A27B2CE34735638B39A3DE46C49D4AE4BF57C58D5AF5BE68E69F6BD78F79E7AD8AC9BCCDF",
 "12D13C14B15A1691781EF23F24625728A29B2CE34735638B39A3DE45F48C49D4AE58D59C5BE67F68E6AC6BD79E7AD7BC89FABFCDF",
 "12E13F1451671891AB1CD23C24625728A29B2DF34A35B3683793DE47E48C49D4BF56E58D59C5AF69F6AC6BD78F7AD7BC8BE9AECEF",
 "12E13F1451671891AB1CD23C24B25A2692782DF34735638B39A3DE46F48C49D4AE57F58D59C5BE68E6AC6BD79E7AD7BC8AF9BFCEF",
 "12E13F14815916A17B1CD23C24625728A29B2DF34735638B39A3DE45C49D4AE4BF58D5AF5BE67C68E69F6BD78F79E7AD89CABCCEF",
 "12F13E1451671891AB1CD23D24625728A29B2CE34B35A3693783CF47F48C49D4AE56F58D59C5BE68E6AC6BD79E7AD7BC8BF9AFDEF",
 "12F13E1451671891AB1CD23D24A25B2682792CE34735638B39A3CF46E48C49D4BF57E58D59C5AF69F6AC6BD78F7AD7BC8AE9BEDEF",
 "12F13E14915816B17A1CD23D24625728A29B2CE34735638B39A3CF45D48C4AE4BF59C5AF5BE67D68E69F6AC78F79E7BC89DABDDEF",
]
tris0 = Triads15[:]
# Triads15parts[part] is the [offset, size of this part in Triads15].
# Part0=triads15build(Triads15[:1]) and Part1 is two iterations (4795+121395).
Triads15parts = [[0,106], [106, 126190], [126296, 1760332], [1886628, 12925668],
                [14812296, 29403912], [44216208, 19385232], [63601440, 1263360],
                [64864800, 0]]

def tri2str(tri):
  """tri2str(str)
     Return a string of 1 char for each 3-form terms. See tri2str()."""
  return "".join(list(x[0][1:] for x in tri.copyTerms()))

def str2tri(str):
  """str2tri(str)
     Return triad15 from a string of 105 hex-digits. See str2tri()."""
  ca = CA()
  for x in range(0,len(str),3):
    ca += CA.Eval(("e" +str[x:x+3],1))
  return ca

def triads15load(codes=[0], path=None, lastVars=False):
  """triads15load([codes=[0],path,lastVars=False])
     Loads spin15-triads<codes>.ca to extend Triads15 with level=code([0]=all)
     from triads15build() with cardinality given by Triads15parts. All needs
     32GB. Lastvars makes the last levels files global for further building."""
  global Triads15
  global Triads15parts
  loading = []
  filename = "spin15-triads%s"
  lastPart = sum(map(lambda x: bool(x[1]>0), Triads15parts)) +1
  codes = [codes] if isinstance(codes, int) else codes
  parts = codes if codes != [0] else range(1, lastPart)
  for part in parts:
    if part not in range(lastPart):
      raise Exception("Invalid codes for triads15load)")
  Lib.checkMem(len(Triads15), 1)
  for idx in parts:
    if Triads15parts[idx][1]:
      out = set()
      beg = len(Triads15)
      siz = (Triads15parts[idx][1] +2000000 -1) //2000000
      loading = list("%d%s" %(idx, "" if siz == 1 else chr(ch +97)) \
                     for ch in range(siz))
      for load in loading:
        if Lib.checkMem(len(Triads15), 1, extra=load):
          break
        isGlobal = (lastVars and idx == parts[-1])
        out = loadCa(filename %load, "tris%s" %load, path, isGlobal)
        if isinstance(Triads15, set):
          Triads15.update(out)
        else:
          Triads15.extend(out)
        out = None
      if Triads15parts[idx][0] != beg or Triads15parts[idx][1] != len(Triads15) -beg:
        sys.stderr.write("Triads15parts[%d] != start:size=%d:%d\n" \
                        %(idx, beg, len(Triads15) -beg))
  Lib.checkMem(len(Triads15), finish=True)
  return len(Triads15)

def loadCa(filename, varname, path=None, isGlobal=False):
  """loadCa(filename, varname, [path,isGlobal])
     Check file existance and return the loaded varname, optionally global."""
  if not path:
    path = os.path.dirname(__file__)
  loadfile = Lib.fixFilename(filename, path, ".ca")
  if not os.path.isfile(loadfile):
    raise Exception("Missing file: %s" %loadfile)
  global out
  try:
    buf = ("global %s\n" %varname) if isGlobal else ""
    buf += Lib.readText(loadfile)
    buf += "\nglobal out\nout = %s\n" %varname
    exec(buf, globals())
  except BaseException as e:
    sys.stdout.write("Problem with file: %s\n" %filename)
    if Lib._isVerbose():
      traceback.print_exc()
    else:
      sys.stdout.write('%s: %s\n' %(type(e).__name__, e))
    raise e
  return out

def saveCa(basename, varname, var, path="", dump=False):
  """saveCa(basename, varname, var, [path,dump])
     Save files <basename>a,b,....ca as <varname>a,b,... in 2M steps of var."""
  Lib._checkType(basename, Lib._basestr, "saveCa")
  Lib._checkType(varname, Lib._basestr, "saveCa")
  Lib._checkType(var, (list, tuple), "saveCa")
  step = 2000000
  if len(var) <= step:
    cnt = 1
    Lib.save(basename, varname, out, path, ".ca")
  else:
    cnt = 0
    for idx in range(0, len(var), step):
      if cnt > 25 or dump:
        sys.stdout.write("Saving %d in file %s%s.ca\n" %(cnt, basename,
                          chr(97 +cnt)))
      Lib.save(basename +"%s" %chr(97 +cnt), varname +"%s" %chr(97 +cnt),
               var[idx:idx +step], path, ".ca")
      cnt += 1
  return cnt

# Windows needs to copy this function into calcCA.py due to a scoping bug.
def taskTriads15build(triads, allTriads, values=list(range(105)), path=None,
                      name="tmp", offs=0, siz=0, status=None, pos=0):
  """triads15build(triads,allTriads,[values,path,name,offs,siz,status,pos])
     Output allTriads updates for values[=0..105] rotation indices of
     triads[offs:siz] via a file with filename <name[=<offs>_<siz>.ca."""
  if siz == 0:
    siz = len(triads)
  outname = "%s%d" %(name, pos)
  errname = "error" +outname +".txt"
  rrr = CA.Basis(15,0,2)
  rr = 0
  out = set()
  try:
    if status:
      status[pos] = offs
    for idx,tt in enumerate(triads[offs:offs +siz]):
      tri = CA.str2tri(tt)
      for r in values:
        rr = rrr[r]
        nxt = CA.tri2str(abs(tri.swap(rr)))
        if nxt not in allTriads:
          out.add(nxt)
      if status:
        status[pos] = offs +idx
        if Lib.freeMemMB() < Lib._memLimitMB:
          status[pos] = -1
          Lib.save(errname, "err", "%d %d: %s"%(pos, idx,
                                           Lib.freeMemMB()), ".", mode="a")
          break
      elif idx % 100 == 0:
        if Lib.checkMem(offs +idx, 1, extra=len(out)):
          Lib.save(errname, "err", "%d %d: %s"%(pos, idx,
                                          Lib.freeMemMB()), ".", mode="a")
          break
    Lib.save(outname, outname, out, path, ".ca")
  except BaseException as e:
    if Lib._isVerbose():
      traceback.print_exc()
    else:
      sys.stdout.write('%s: %s\n' %(type(e).__name__, e))
    Lib.save(errname, "err", '%s: %s' %(type(e).__name__,e), ".", mode="a")
    if status:
      status[pos] = -2
  if status:
    status.shm.close()
  return out

def triads15build(triads, cpus=1, path=None, name="tmp", values=None):
  """triads15build(triads, [cpus=1, path,name="tmp",values=(0..105)])
     Output Triads15 updates for triads with cpus tasks via out files."""
  if not values:
    values = list(range(105))
  out=set()
  allTriads = set(Triads15)
  status = oldStatus = None
  Lib.checkMem(len(Triads15), 1)
  try:
    size = len(triads)
    step = (size +cpus -1) //cpus
    last = (size +step -1) //step
    if cpus == 1:
      out = taskTriads15build(triads, allTriads, values, path, name)
    elif cpus > 1:
      process = []
      if shared_memory:
        status = shared_memory.ShareableList([0] *cpus)
      else:
        sys.stderr.write("Shared memory is not available for status logging\n")
      for start in range(0, size, step):
        idx = start //step
        process.append(Process(target=taskTriads15build, args=(triads,
                   allTriads, values, path, name, start, step, status, idx)))
      for proc in process:
        proc.start()
      time.sleep(10)
      for pos,task in enumerate(process):
        while task.is_alive():
          tmp = list(status[idx] for idx in range(cpus)) if status else None
          if tmp == oldStatus or pos == 0:
            Lib.checkMem(pos, 1, extra=tmp)
            sys.stdout.flush()
            oldStatus = tmp
          task.join(1800)
        else:
          task.join()
      time.sleep(10)
      sys.stdout.write("Read files %s[0..%d].ca\n" %(name, last -1))
      sys.stdout.flush()
      for idx in range(last):
        outname = name +"%d" %idx
        buf = Lib.readText(Lib.fixFilename(outname, path, ".ca"))
        buf += "\nout.update(%s)\n" %outname
        exec(buf, locals())
      for idx in range(last):
        os.remove(Lib.fixFilename("%s%d.ca" %(name, idx), path, ".ca"))
  except BaseException as e:
    if Lib._isVerbose():
      traceback.print_exc()
    else:
      sys.stdout.write('%s: %s\n' %(type(e).__name__, e))
  if status:
    status.shm.close()
    status.shm.unlink()
  Lib.checkMem(len(out), finish=True)
  return list(out)

def triads15parts(code, cpus=2, redo=[], path=""):
  """triads15parts(code, [cpus=2,redo=[],path])
     Extend Triads15 with level code (0=all) using triads15build/load.
     For code>1 assumes triads15load(code=0 and code-1,True) has been run.
     For code>2 can do file indices listed in redo. If redo contains -1 
     or is blank then at the end accumulate all outs files and write sorted
     2M rows as spin15-triads<code?> files ?=a,b,c... if rows > 2M."""
  if isinstance(redo, int):
    redo = [redo]
  Lib._checkType(code, int, "triads15parts")
  Lib._checkType(cpus, int, "triads15parts")
  Lib._checkType(redo, (list, tuple), "triads15parts")
  Lib._checkType(path, Lib._basestr, "triads15parts")
  if code not in range(len(Triads15parts) +1):
    raise Exception("Invalid value for code in triads15parts")
  parts = [code] if code else range(1, len(Triads15parts) +1)
  triname = "spin15-triads%d%s"
  outname = "out%d%s"
  tmpname = "tmp%d%s"       # Used for subtask files
  global Triads15
  if len(Triads15) < Triads15parts[parts[-1] -1][1] and redo != [-1]:
    raise Exception("Need to load triads for level %d" %(parts[-1] -1))
  Triads15 = set(Triads15)
  for part in parts:
    beg = len(Triads15)
    codes = Triads15parts[part -1]
    size = (codes[1] +2000000 -1) //2000000
    for idx in range(size):
      out = []
      subpart = "" if size == 1 else chr(97 +idx)
      if part == 1:  # Part 1 has 2 sub-parts
        sys.stdout.write("Use tris0 twice to build %s.ca\n" \
                                          %outname %(part, ""))
        Triads15 = set(tris0)
        triads = triads15build(tris0, cpus, path, tmpname %(0, ""))
        out = triads +triads15build(triads, cpus, path, tmpname %(1, ""))
      elif code == 0:
        triads = loadCa(triname %(part -1, subpart), 
                        "tris%d%s" %(part -1, subpart), path)
        sys.stdout.write("Use %s.ca to build %s.ca\n" %(triname %(part -1,
                                subpart), outname %(part, subpart)))
        out = triads15build(triads, cpus, path, tmpname %(part, subpart))
      elif idx in redo or not redo:
        sys.stdout.write("Use tris%d%s to build %s\n" %(part -1, subpart,
                                  outname %(part, subpart)))
        triads = eval("tris%d%s" %(part -1, subpart))
        out = triads15build(triads, cpus, path, tmpname %(part, subpart))
      siz = saveCa(outname %(part, subpart), outname %(part, subpart), out,path)
      sys.stdout.write("Saved %s%s.ca\n" %(outname %(part, subpart),
                      ("[a..%s]" %chr(97 +siz -1)) if siz>1 else ""))
      sys.stdout.flush()
    triads = set()
    if -1 in redo or not redo:
      subpart = "" if size == 1 else ("[a..%s]" %chr(97 +size -1))
      sys.stdout.write("Reload %s.ca to save %s.ca\n" %(outname %(part,
                       subpart), triname %(part, "")))
      Lib.checkMem()
      for idx in range(size):
        subpart = "" if size == 1 else chr(97 +idx)
        cnt = 0
        tmpname = outname %(part, subpart)
        while os.path.isfile(Lib.fixFilename(tmpname +chr(97 +cnt), path,
                             ".ca")):
          triads.update(loadCa(tmpname +chr(97 +cnt), tmpname +chr(97 +cnt),
                               path))
          cnt += 1
        if cnt == 0:
          triads.update(loadCa(tmpname, tmpname, path))
        subparts = "%s%s" %(outname %(part, subpart), 
                         ("[a..%s]" %chr(97 +cnt -1) if cnt else ""))
        if Lib.checkMem(idx, 1, extra=subparts):
          break
        sys.stdout.flush()
      siz = saveCa(triname %(part, ""), "tris%d" %part,
                   list(sorted(triads)), path)
      Triads15.update(triads)
      Lib.checkMem(len(out), finish=True)
      fin = len(Triads15)
      sys.stdout.write("%s.ca has %d file%s, %d offset & size %d\n" %(triname\
               %(part, ""), siz, ("s" if siz>1 else ""), beg, fin -beg))
      if part < len(Triads15parts) and Triads15parts[part] != [beg, fin -beg]:
        sys.stdout.write("Triads15parts[%d]=%s\n" %(part, Triads15parts[part]))
      if fin > beg:
        Triads15parts[part] = [beg, fin -beg]
  Triads15 = list(Triads15)


# Nacs15 is the unique sub-sedonion algebras. Nacs15Names provides the first
# occurance name, code, index and signed combination. Check with nacs15map().

Nacs15map_0 = (
  (210, 210, 210, 210, 210, 210, 210, 210, 224, 200, 224, 200, 224, 200, 208,
   208, 208, 208, 208, 208, 252, 228, 204, 180, 236, 236, 188, 188, 220, 196,
   220, 196, 204, 204, 204, 204),)

# Dictionary of non-assoc. cnt to (sub-algebra name, first example part, idx
# and allSign position (282:I6=Sedenions). There are 101 S +sub-sedenions.
# all(list(Nacs15[z[0]]==Triads15parts[z[1][1][1]][z[1][1][2]] \
#     for z in (x for x in enumerate(Nacs15names.items())))) == True
Nacs15names = {
 128: ('A1',3,6793710,4), 130: ('A2',2,1106227,4), 132: ('A3',3,7643461,4),
 134: ('A4',3,6980279,22),136: ('A5',2,476144,17), 138: ('A6',2,973626,3),
 140: ('A7',1,89116,16),  142: ('A8',1,70147,3),   144: ('A9',0,67,26),
 146: ('B1',1,22193,30),  148: ('B2',1,10210,10),  150: ('B3',1,2742,30),
 152: ('B4',0,67,29),     154: ('B5',1,2743,30),   156: ('B6',1,3045,30),
 158: ('B7',1,755,24),    160: ('B8',0,67,12),     162: ('B9',0,58,23),
 164: ('C1',0,39,23),     166: ('C2',0,84,22),     168: ('C3',0,60,23),
 170: ('C4',0,58,13),     172: ('C5',0,39,27),     174: ('C6',0,33,23),
 176: ('C7',0,39,13),     178: ('C8',0,34,23),     180: ('C9',0,0,23),
 182: ('D1',0,32,23),     184: ('D2',0,36,28),     186: ('D3',0,33,14),
 188: ('D4',0,0,26),      190: ('D5',0,12,11),     192: ('D6',0,33,7),
 194: ('D7',0,32,9),      196: ('D8',0,0,29),      198: ('D9',0,12,16),
 200: ('E1',0,0,9),       202: ('E2',0,32,14),     204: ('E3',0,0,22),
 206: ('E4',0,12,30),     208: ('E5',0,0,14),      210: ('E6',0,0,0),
 212: ('E7',0,8,21),      214: ('E8',0,14,18),     216: ('E9',0,36,4),
 218: ('F1',0,32,8),      220: ('F2',0,0,28),      222: ('F3',0,12,18),
 224: ('F4',0,0,8),       226: ('F5',0,33,10),     228: ('F6',0,0,21),
 230: ('F7',0,32,25),     232: ('F8',0,43,32),     234: ('F9',0,32,10),
 236: ('G1',0,0,24),      238: ('G2',0,12,12),     240: ('G3',0,40,28),
 242: ('G4',0,43,29),     244: ('G5',0,43,21),     246: ('G6',0,35,10),
 248: ('G7',0,43,8),      250: ('G8',0,41,21),     252: ('G9',0,0,20),
 254: ('H1',0,57,24),     256: ('H2',0,41,15),     258: ('H3',0,38,32),
 260: ('H4',0,64,5),      262: ('H5',0,64,0),      264: ('H6',0,43,15),
 266: ('H7',0,64,4),      268: ('H8',1,228,10),    270: ('H9',1,224,15),
 272: ('I1',1,224,11),    274: ('I2',0,64,11),     276: ('I3',1,228,20),
 278: ('I4',1,224,13),    280: ('I5',1,224,5),     282: ('I6',1,224,32),
 284: ('I7',1,3254,27),   286: ('I8',1,224,8),     288: ('I9',1,224,17),
 290: ('J1',0,64,26),     292: ('J2',1,3491,10),   294: ('J3',1,224,19),
 296: ('J4',1,10360,21),  298: ('J5',1,12741,31),  300: ('J6',1,13316,21),
 302: ('J7',1,10311,32),  304: ('J8',0,64,21),     306: ('J9',1,7728,21),
 308: ('K1',1,4781,27),   310: ('K2',1,8269,23),   312: ('K3',1,115784,27),
 314: ('K4',2,517043,12), 316: ('K5',1,82648,7),   318: ('K6',1,35372,14),
 320: ('K7',1,224,31),    322: ('K8',1,35370,14),  324: ('K9',2,193266,30),
 326: ('L1',3,3600142,7), 328: ('L2',3,8667056,7)}

def nacs15subalg(tri, pos=None):
  """nacs15subalg(tri, [pos])
     Return non-assoc. cnt for tri or str2tri(tri).allSigns()[pos] sub-alg."""
  if pos is not None:
    if pos not in range(105):
      raise Exception("Invalid nacs15subalg signed position")
    tri = list(CA.str2tri(tri).allSigns(36))[pos]
  return len(list(Lib.triadDump(Tensor.Triads(*tri.spin(f15Basis)) \
                     .assocTriads(f15Basis,True),f15Basis,1)))

# First nacs15subalg() triads in Nacs15names order extracted from Triads15parts
Nacs15 = [ \
 "12913B14A15F16E17D18C23425C26728F2AB2DE35E36F37839A3CD45D46847F49B4CE56B57A58969D6AC79E7BC8AE8BD9CFADFBEF",
 "12A13B14915F16E17D18C23425D26827F29B2CE35E36F37839A3CD45C46748F4AB4DE56B57A58969D6AC79E7BC8AE8BD9CFADFBEF",
 "12A13914B15F16E17D18C23425D26827F29B2CE35C36738F3AB3DE45E46F47849A4CD56B57A58969D6AC79E7BC8AE8BD9CFADFBEF",
 "12913D14C15F16718A1BE23425627F28E2AB2CD35B36A37839C3EF45A46B47E48F49D57958C5DE68D69F6CE7AD7BC89B9AEACFBDF",
 "12513814B16917C1AD1EF23F24926B27D28E2AC34C35E36D37B39A4564784AF4DE57A58F59B5CD67F68A6CE79E89D8BC9CFABEBDF",
 "12913814F15E16C17B1AD23D24B25627F28A2CE34C35736F39A3BE45A4684794DE58B59C5DF67D69E6AB78E7AC89D8CF9BFAEFBCD",
 "12B13514D1671891AC1EF23924625827D2AF2CE34F36A37C38B3DE45E47B48C49A56C57A59B5DF68E69F6BD78F79E8AD9CDABEBCF",
 "12813914F15E16D17C1AB23B24C25627F29A2DE34D35736F38A3CE45A4694784BE58D59C5BF67B68E6AC79E7AD89B8CF9DFAEFBCD",
 "12314E15F1671891AB1CD24D25726F28A29B2CE34C35637F38B39A3DE45A4694784BF58D59C5BE68E6AC6BD79E7AD7BC8CF9DFAEF",
 "12314A15B1671891CF1DE24625827A29B2CD2EF34735936A38B3CE3DF45F48E49D4BC56E57D5AC68F69C6BD78C79F7BE8AD9AEABF",
 "12314516F17C1891AB1DE24E25D26C27F28B29A34D35E36738A39B3CF46B47948C4AF56A57859C5BF68E69D7AE7BD8DF9EFACDBCE",
 "1231451681791AB1CD1EF24925726B28A2CE2DF34735936A38B3CF3DE46E48F4AD4BC56F58E5AC5BD67D69C78C7AE7BF89D9AF9BE",
 "12314E15F1671891AB1CD24D25726F28A29B2CE34C35637F38B39A3DE45A4694784BF58D59C5BE68E6AC6BD79E7AD7BC8CF9DFAEF",
 "1231451681791AB1CD1EF24925726B28A2CE2DF34735936A38B3CF3DE46F48E4AC4BD56E58F5AD5BC67C69D78D7AF7BE89C9AE9BF",
 "12314516817A19B1CD1EF24725A26928B2CF2DE34A35736B3893CE3DF46E48F49D4BC56F58E59C5BD67D6AC78C79E7BF8AD9AFABE",
 "12314516718A19B1CD1EF24825A26927B2CE2DF34A35836B3793CF3DE46F47E49D4BC56E57F59C5BD68D6AC78C7AD89F8BE9AEABF",
 "12314E15F1671891AB1CD24D25726F28A29B2CE34C35637F38B39A3DE45A4694784BF58D59C5BE68E6AC6BD79E7AD7BC8CF9DFAEF",
 "12314A15B1671891CD1EF24625827A29B2CE2DF34735936A38B3CF3DE45E48C49D4BF56C57D5AF68E69F6BD78F79E7BC8AD9ACABE",
 "12314516B17A1891CD1EF24A25726829B2CE2DF34735A36938B3CF3DE46E48C49D4BF56F58D59C5BE67D6AC78F79E7BC8AE9AFABD",
 "12813914E15F16C17D1AB23A24625729B2CE2DF34735638B3CF3DE45A48C49D4BF58D59C5BE67A68E69F6BD78F79E7BC89AACDAEF",
 "12314B15A1671891CD1EF24625927B28A2CE2DF34735836B39A3CF3DE45F48C49D4AE56D57C5BE68E69F6AC78F79E7AD8BD9BCABF",
 "12314A15B1671891CD1EF24625827A29B2CE2DF34735936A38B3CF3DE45E48C49D4BF56C57D5AF68E69F6BD78F79E7BC8AD9ACABE",
 "12314516B17A1891CD1EF24A25726829B2CE2DF34735A36938B3CF3DE46E48C49D4BF56F58D59C5BE67D6AC78F79E7BC8AE9AFABD",
 "1231451681791AB1CD1EF24925726B28A2CE2DF34735936A38B3CF3DE46D48C4AE4BF56C58D5AF5BE67E69F78F7AD7BC89E9AC9BD",
 "12314516B17A1891CD1EF24A25726829B2CE2DF34735A36938B3CF3DE46E48C49D4BF56F58D59C5BE67D6AC78F79E7BC8AE9AFABD",
 "1231451691781AB1CD1EF24625927B28A2CE2DF34935637A38B3CF3DE47D48C4AE4BF57C58D5AF5BE67F68E6AC6BD79E89F9AD9BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451681791AB1CD1EF24625827A29B2CE2DF34835637B39A3CF3DE47C49D4AE4BF57D59C5AF5BE67E69F6AC6BD78F89E8AD8BC",
 "12314516A17B1891CD1EF24625A27829B2CE2DF34A35637938B3CF3DE47E48C49D4BF57F58D59C5BE67C68E69F6BD7AD8AF9AEABC",
 "1231451681791AB1CD1EF24925726B28A2CE2DF34735936A38B3CF3DE46D48C4AE4BF56C58D5AF5BE67E69F78F7AD7BC89E9AC9BD",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451681791AB1CD1EF24925726B28A2CE2DF34735936A38B3CF3DE46D48C4AE4BF56C58D5AF5BE67E69F78F7AD7BC89E9AC9BD",
 "1231451681791AB1CD1EF24625827A29B2CE2DF34835637B39A3CF3DE47C49D4AE4BF57D59C5AF5BE67E69F6AC6BD78F89E8AD8BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451681791AB1CD1EF24625827A29B2CE2DF34835637B39A3CF3DE47C49D4AE4BF57D59C5AF5BE67E69F6AC6BD78F89E8AD8BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AB1CE1DF24625728A29B2CD2EF34735638B39A3CF3DE48C49E4AD4BF58E59C5AF5BD68D69F6AC6BE78F79D7AE7BC",
 "1231451671891AD1BC1EF24625728A29D2BF2CE34735638D39A3BE3CF48C49B4AE4DF58B59C5AF5DE68E69F6AC6BD78F79E7AB7CD",
 "12314516A17B1891CD1EF24625A27829B2CE2DF34A35637938B3CF3DE47E48C49D4BF57F58D59C5BE67C68E69F6BD7AD8AF9AEABC",
 "1231451681791AB1CD1EF24625827A29B2CE2DF34835637B39A3CF3DE47C49D4AE4BF57D59C5AF5BE67E69F6AC6BD78F89E8AD8BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451681791AB1CD1EF24925726B28A2CE2DF34735936A38B3CF3DE46D48C4AE4BF56C58D5AF5BE67E69F78F7AD7BC89E9AC9BD",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451681791AB1CD1EF24625827A29B2CE2DF34835637B39A3CF3DE47C49D4AE4BF57D59C5AF5BE67E69F6AC6BD78F89E8AD8BC",
 "12314516D17C1891AB1EF24C25726E28A29B2DF34735C36F38B39A3DE46849D4AE4BF56958D5AF5BE67B6AC78F79E7AD8CE9CFBCD",
 "1231451681791AB1CD1EF24625827A29B2CE2DF34835637B39A3CF3DE47C49D4AE4BF57D59C5AF5BE67E69F6AC6BD78F89E8AD8BC",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231451671891AC1BD1EF24625728A29C2BE2DF34735638C39A3BF3DE48B49D4AE4CF58D59B5AF5CE68E69F6AB6CD78F79E7AD7BC",
 "12314516C17D1891AB1EF24625C27E28A29B2DF34C35637F38B39A3DE47849D4AE4BF57958D5AF5BE67A68E69F6BD7BC8CF9CEACD",
 "12314516D17C1891AB1EF24C25726E28A29B2DF34735C36F38B39A3DE46849D4AE4BF56958D5AF5BE67B6AC78F79E7AD8CE9CFBCD",
 "12314516D17C1891AB1EF24C25726E28A29B2DF34735C36F38B39A3DE46849D4AE4BF56958D5AF5BE67B6AC78F79E7AD8CE9CFBCD",
 "1231451691781AB1CD1EF24825726A29B2CE2DF34735836B39A3CF3DE46C49D4AE4BF56D59C5AF5BE67F68E79E7AD7BC89F8AC8BD",
 "12314516D17C1891AB1EF24C25726E28A29B2DF34735C36F38B39A3DE46849D4AE4BF56958D5AF5BE67B6AC78F79E7AD8CE9CFBCD",
 "12314516C17D1891AB1EF24D25726F28A29B2CE34735D36E38B39A3CF46948C4AE4BF56859C5AF5BE67A6BD78F79E7BC8DE9DFACD",
 "1231451671891AB1CD1EF24625728A29B2CE2DF34735638B39A3CF3DE48C49D4AE4BF58D59C5AF5BE68E69F6AC6BD78F79E7AD7BC",
 "1231491581671AB1CD1EF24A25726829B2CE2DF34B35637839A3CF3DE45D46E47F48C59C5AF5BE69F6AC6BD79E7AD7BC89D8AE8BF",
 "12314516C17D1891AB1EF24D25726F28A29B2CE34735D36E38B39A3CF46948C4AE4BF56859C5AF5BE67A6BD78F79E7BC8DE9DFACD",
 "12314516B17A1891CD1EF24625B27928A2CE2DF34B35637839A3CF3DE47F48C49D4AE57E58D59C5AF67D68E69F6AC7BC8BF9BEABD",
 "12314D15C1671891AB1EF24625F27D28A29B2CE34735E36D38B39A3CF45948C4AE4BF56B57A58D68E69F6AC78F79E7BC9CDADFBDE",
 "12314D15C1671891AB1EF24625F27D28A29B2CE34735E36D38B39A3CF45948C4AE4BF56B57A58D68E69F6AC78F79E7BC9CDADFBDE",
 "12314516D17C1891AB1EF24C25726E28A29B2DF34735C36F38B39A3DE46849D4AE4BF56958D5AF5BE67B6AC78F79E7AD8CE9CFBCD",
 "12314D15C1671891AB1EF24625F27D28A29B2CE34735E36D38B39A3CF45948C4AE4BF56B57A58D68E69F6AC78F79E7BC9CDADFBDE",
 "1231451671891AC1BD1EF24D25B2682792AF2CE34B35D3693783AE3CF46E47F48C49A56F57E58A59C6AB6CD7AD7BC8BF8DE9BE9DF",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "12314D15C1671891AB1EF24625F27D28A29B2CE34735E36D38B39A3CF45948C4AE4BF56B57A58D68E69F6AC78F79E7BC9CDADFBDE",
 "1231451671891AC1BD1EF24D25B2682792AF2CE34B35D3693783AE3CF46E47F48C49A56F57E58A59C6AB6CD7AD7BC8BF8DE9BE9DF",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "12314516817B19F1AE1CD24B25726928F2AD2CE34735B36F3893AC3DE46D48C49A4EF56C58D59E5AF67E6AB78A79C7DF8BE9BDBCF",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "12314D15C1671891AB1EF24625F27D28A29B2CE34735E36D38B39A3CF45948C4AE4BF56B57A58D68E69F6AC78F79E7BC9CDADFBDE",
 "12314516817E19A1BF1CD24925A26B27D28F2CE34A35936F37C38B3DE46D47B48C4EF56C57F58D5BE6796AE78A89E9BD9CFABCADF",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "12314516F17D18A19B1CE24D25726C2892AB2EF34735D36E38B39A3CF46948C4AE4BF56B58E59F5AC67A68D78F79E7BC9CDADFBDE",
 "12314615C17A1891BD1EF24526C27928A2BE2DF34C35637839A3BF3DE47F48B49D4AE57D58E59F5AB67E68D69B6AF7BC8CF9CEACD",
 "12314615E17D18A19B1CF24D25C2672892AB2EF34735F36D38B39A3CE45948C4AF4BE56B57A58D68F69E6AC78E79F7BC9CDADEBDF",
 "12314516F17D1891AB1CE24D25726C28B29A2EF34735D36E38A39B3CF46849F4AE4BC56958F5AC5BE67A6BD78E79C7BF8CD9DEADF",
 "12314D15C1671891AB1EF24625F27D28A29B2CE34735E36D38B39A3CF45948C4AE4BF56B57A58D68E69F6AC78F79E7BC9CDADFBDE",
 "12314516D17819A1BC1EF24825726E29B2AC2DF34735836F39C3AB3DE46A49D4BF4CE5695AD5BE5CF67B68C79E7AF7CD89F8AE8BD",
 "12314516A17819C1BD1EF24B25D26728A29F2CE34D35B36837A39E3CF46F47948C4AE56E57C5895AF69B6CD7BF7DE8BE8DF9ADABC",
 "12314516D17C1891AF1BE24725C26E28A29F2BD34C35736B38F39A3DE46849D4AE4BF56958D5AB5EF67A6CF78E79B7DF8BC9CEACD",
 "12E13D14815916C17B1AF23C24F25726D28A29B34735F36E38B39A45C4694AE4BD5685AD5BE67A6BF78D79E7CF89C8EF9DFABCCDE",
 "12513C14D1691781AF1BE23724628C29D2AE2BF34B35836F39A3DE45947F48A4CE56D57C5AB5EF67B68E6AC79E7AD89B8DF9CFBCD",
 "12A13714E15618C19D1BF23D24F25C2682792BE34536E38B39A3CF4674894AB4CD57E58A59B5DF69F6AC6BD78F7AD7BC8DE9CEAEF",
 "1241351671891AB1CD1EF23D25C2682792AF2BE34C36E37F38B39A45D4694784AE4BF56F57E58A59B6AC6BD7AD7BC8CF8DE9CE9DF",
 "1231451671891AC1BD1EF24B25D2692782AF2CE34D35B3683793AE3CF46F47E48C49A56E57F58A59C6AB6CD7AD7BC8BE8DF9BF9DE",
 "1241351671891AB1CD1EF23C25D2692782AF2BE34D36F37E38B39A45C4684794AE4BF56E57F58A59B6AC6BD7AD7BC8CE8DF9CF9DE",
 "12314B15916718F1AE1CD24D25627928A2BC2EF34C35736938E3AF3BD45E46F47849A58C5AB5DF68B6AC6DE7AD7BF7CE89D9BE9CF",
 "12613714E15F18B19C1AD23425827E29A2BF2CD35936E38A3BD3CF45A4674894BC4DF56B57C5DE68F69D6AC78D79F7AB8CE9BEAEF",
 "12B13A14715618D19C1EF23F24C25D2682792AE34D35C3693783BE45F46E48A49B57E58B59A67F6AC6BD7AD7BC89F8CE9DEABFCDF"]

def nacs15map(code=0):
  """nacs15map([code=0=all])
     Return invalid Nacs15names checking Nacs15 after triads15load(code)."""
  idx = 0
  out = {}
  for sa,nac in Nacs15names.items():
    tri = ""
    if code in (0, nac[1]):
      if nac[1] >= len(Triads15parts) or \
         Triads15parts[nac[1]][0] +nac[2] >= len(Triads15):
        raise Exception("Triads15parts[%d] needed for %d\n" %(nac[1], sa))
      else:
        tri = Triads15[Triads15parts[nac[1]][0] +nac[2]]
        tmp = nacs15subalg(tri, nac[3])
        if tri != Nacs15[idx] or tmp != sa:
          out[sa] = (tmp, idx)
    idx += 1
  return out

# Windows needs to copy this function into calcCA.py due to a scoping bug.
def taskNacs15build(triads, nacs15keys, offs=0, siz=0,
                    path="", name="nactmp", status=None, pos=0):
  """taskNacs15build(triads,nacs15keys,[offs,siz,path,name,status,pos])
     Output new Nacs15 signed sub-sedenion algs from 36 signed triads if cnt==1
     else use cnt tasks via outnacs*.ca files."""
  if siz == 0:
    siz = len(triads)
  outname = "%s%d" %(name, pos)
  errname = "error" +outname +".txt"
  out = []
  cnt = 0
  bas = list("f%s" %chr(x+49 if x<9 else x+56) for x in range(15))
  try:
    for idx,triad in enumerate(triads[offs:offs +siz]):
      for sgn,tri in enumerate(CA.str2tri(triad).allSigns(36)):
        tmp = len(list(Lib.triadDump(Tensor.Triads(*(tri).spin(bas)) \
                               .assocTriads(bas,True), bas, 1)))
        if tmp not in nacs15keys:
          cnt += 1
          nacs15keys.add(tmp)
          out.append((tmp, offs +idx, sgn, triad))
          if not status:
            sys.stdout.write("Not in Nacs15 %d: %d,%d\n" %(cnt, offs +idx, sgn))
      if status:
        status[pos] = offs +idx
        if Lib.freeMemMB() < Lib._memLimitMB:
          Lib.save(errname, "err", "%d %d: %s"%(pos, idx,
                   Lib.freeMemMB()), ".", mode="a")
          status[pos] = -1
          break
      elif Lib.checkMem(offs +idx, 10000, extra=cnt):
        Lib.save(errname, "err", "%d %d: %s"%(pos, idx,
                 Lib.freeMemMB()), ".", mode="a")
        break
    Lib.save(outname, outname, out, path, ".ca")
  except BaseException as e:
    if Lib._isVerbose():
      traceback.print_exc()
    else:
      sys.stdout.write('%s: %s\n' %(type(e).__name__, e))
    Lib.save(errname, "err", '%s: %s' %(type(e).__name__,e), ".", mode="a")
    if status:
      status[pos] = -2
  if status:
    status.shm.close()
  return out

def nacs15build(triads, cpus=1, path="", name="nactmp"):
  """nacs15build(triads,[cpus=1,path,name="nactmp"])
     Output new Nacs15 signed sub-sedenion algs from 36 signed triads."""
  nacs15keys = set(Nacs15names.keys())
  out = []
  Lib.checkMem()
  status = oldStatus = None
  try:
    size = len(triads)
    step = (size +cpus -1) //cpus
    last = (size +step -1) //step
    if cpus == 1:
      out = taskNacs15build(triads, nacs15keys)
    elif cpus > 1:
      process = []
      if shared_memory:
        status = shared_memory.ShareableList([0] *cpus)
      else:
        sys.stderr.write("Shared memory is not available for status logging\n")
      for start in range(0, size, step):
        idx = start //step
        process.append(Process(target=taskNacs15build,
                 args=(triads, nacs15keys, start, step, 
                       path, name, status, idx)))
      for cnt,proc in enumerate(process):
        proc.start()
      time.sleep(10)
      for pos,task in enumerate(process):
        while task.is_alive():
          tmp = list(status[idx] for idx in range(cpus)) if status else None
          if tmp == oldStatus or pos == 0:
            Lib.checkMem(pos, 1, extra=tmp)
            sys.stdout.flush()
            oldStatus = tmp
          task.join(1800)
        else:
          task.join()
      time.sleep(10)
      sys.stdout.write("Read files %s0..%d.ca\n" %(name, last -1))
      sys.stdout.flush()
      newKeys = set()
      for idx in range(last):
        outname = name +"%d" %idx
        tmp = loadCa(outname, outname, path, ".ca")
        for nac in tmp:
          if nac[0] not in newKeys:
            newKeys.add(nac[0])
            out.append(nac)
      for idx in range(last):
        os.remove(Lib.fixFilename("%s%d.ca" %(name, idx), path, ".ca"))
  except BaseException as e:
    if Lib._isVerbose():
      traceback.print_exc()
    else:
      sys.stdout.write('%s: %s\n' %(type(e).__name__, e))
  if status:
    status.shm.close()
    status.shm.unlink()
  Lib.checkMem(len(out), finish=True)
  return out

def nacs15parts(code, cpus=2, redo=[], path="."):
  """nacs15parts(code, [cpus=2,redo=[],path="."])
     Extend Nacs15 and Nacs15names with level code (0=all) using nacs15build.
     For code>2 can do file indices listed in redo. If redo contains -1 then at
     the end accumulate all outnacs files and write spin15-nacs<code> file.
     Code==1 does both parts 0 and 1."""
  global Nacs15names
  global Nacs15
  if isinstance(redo, int):
    redo = [redo]
  Lib._checkType(code, int, "nacs15parts")
  Lib._checkType(cpus, int, "nacs15parts")
  Lib._checkType(redo, (list, tuple), "nacs15parts")
  Lib._checkType(path, Lib._basestr, "nacs15parts")
  if code not in range(len(Triads15parts) +1):
    raise Exception("Invalid value for code in nacs15parts")
  parts = [code] if code else range(1, len(Triads15parts))
  triname = "spin15-triads%d%s"
  tmpname = "nactmp%d%s"     # Used by tasks
  outname = "nacout%s"
  sizePart0 = 0
  out = []
  newKeys = set()
  for part in parts:
    codes = Triads15parts[part]
    size = (codes[1] +2000000 -1) //2000000
    for idx in range(size):
      if idx in redo or not redo:
        tmp = []
        subpart = "" if size == 1 else chr(97 +idx)
        if part == 1:  # Part 1 has 2 sub-parts
          sys.stdout.write("Use tris0 to generate %s\n" %tmpname %(0, ""))
          tmp = nacs15build(tris0, cpus, path, tmpname %(0, ""))
          sizePart0 = len(tmp)
          sys.stdout.write("Part 0 size is %d\n" %sizePart0)
          sys.stdout.flush()
        sys.stdout.write("Use %s to generate %s\n" %(triname %(part,
                                subpart), tmpname %(part, subpart)))
        sys.stdout.flush()
        triads = loadCa(triname %(part, subpart), "tris%d%s" %(part, subpart),
                        path, ".ca")
        tmp += nacs15build(triads, cpus, path, tmpname %(part, subpart))
        Lib.save(tmpname %(part, subpart), tmpname %(part, subpart),
                 tmp, path, ".ca")
    if (-1 in redo or not redo) and size > 0:
      codes = Triads15parts[part]
      subpart = "" if size == 1 else ("[a..%s]" %chr(97 +size -1))
      sys.stdout.write("Reload %s.ca to save %s.ca\n" %(tmpname %(part,
                       subpart), outname %part))
      sys.stdout.flush()
      for idx in range(size):
        subpart = "" if size == 1 else chr(97 +idx)
        tmp = tmpname %(part, subpart)
        for pos,nac in enumerate(loadCa(tmp, tmp, path, ".ca")):
          if nac[0] not in newKeys:
            newPart = 0 if part == 1 and pos < sizePart0 else part
            newKeys.add(nac[0])
            out.append(nac)
            offs = idx *2000000
            Nacs15names[nac[0]] = ("", newPart, offs +nac[1], nac[2])
            Nacs15.append(nac[3])
      Lib.save(outname %part, outname %part, out, path, ".ca")
  if -1 in redo or not redo:
    Lib.save(outname %"names.ca", "nacs15names", Nacs15names, path, ".ca")
    Lib.save(outname %"triads.ca", "nacs15", Nacs15, path, ".ca")
  return len(Nacs15)

# TBD: Triads7 reflections have the same structure for each primary
# This is easy to just check the remainder. CA(15) doesn't have the equivalent.
Nacs15mirrors = []

def nacs15mirrors(idx):
  """nacs15mirrors(idx)
     Check Triads15[idx] first 36 signed combos have the same mirror indices."""
  if idx < 0 or idx >= len(Triads15):
    raise Exception("Invalid nacs15subalg signed position")
  triad = CA.str2tri(Triads15[idx])
  cmp = []
  for cnt,tri in enumerate(triad.allSigns(36)):
    buf = [cnt]
    for ref in CA.Basis(15,0,1):
      #idx32768,parity = ref.reflect(tri).allSignsIndices()
      terms = Tensor(*list(CA(**dict((x,))) \
              for x in ref.reflect(tri).copyTerms()))
      cnt = 0
      sgns = []
      for idx,term in enumerate(terms):
        if term < 0:
          sgns.append(idx +1)
        cnt += 1
      buf.append(len(sgns))
      #buf.append(idx32768)
      #buf.append(32768 -idx32768)
    cmp.append(buf)#sorted(buf)[:36])
  #if cmp != Nacs15mirrors:
  #  print("NOT EQUAL", idx)
  #  return cmp
  #return []
  return cmp

# Enabling algebra
PS15 = CA.Basis(15,0,15)[0]
F15 = list(CA.Eval(term) for term in str2tri(tris0[0]).copyTerms())
FF15 = -PS15 *Tensor(F15)
P15 = e12478BDE +e12479ACF +e12568BCF +e12569ADE +e13468ADF +e13469BCE \
     +e13578ACE +e13579BDF +e234589EF +e2345ABCD +e236789CD +e2367ABEF \
     +e456789AB +e4567CDEF +e89ABCDEF 
PP15 = -e123456789ABCDEF *P15
# ((7-P15)/8)**2 == 1 & ((7e123456789ABCDEF +PP15)/8)**2 == -1

# Octonians have f*f+7==+-6e1234567*f. Spin7R is a Spin(7) subset.
# with f*f+7 == +-2*f' +<one term>
def triadsShalf(idx):
  """triadsShalf(idx)
     Yield Sedenion Triads15[idx].allSigns(<64), 64..127 are minus these."""
  if idx < 0 or idx >= len(Triads15):
    raise Exception("Invalid triadsShalf Triads15 index")
  for phi in CA.str2tri(Triads15[idx]).allSigns(True):
    if len(list(Lib.triadDump(Tensor.Triads(*phi.spin(f15Basis)) \
                          .assocTriads(f15Basis,True), f15Basis,1))) == 252:
      yield phi

def triads15all(idx, pos=0):
  """triads15all(idx, [pos])
     Enumerate all signed terms of Triads15[idx] and return pos index."""
  Lib._checkType(idx, int, "triads15all")
  Lib._checkType(pos, int, "triads15all")
  if idx <0 or idx > len(Triads15) or pos < 0 or pos > 32767:
    raise Exception("Invalid input range in triads15all: %d,%d" %(idx,pos))
  return list(CA.str2tri(Triads15[idx]).allSigns(36))[pos]

def triads15terms(idx, pos=0):
  """triads15terms(idx, [pos])
     Return triads15all(idx,pos) as a Tensor of Eval(copyTerms)."""
  Lib._checkType(idx, int, "triads15terms")
  Lib._checkType(pos, int, "triads15terms")
  if idx <0 or idx > len(Triads15) or pos < 0 or pos > 32767:
    raise Exception("Invalid input range in triads15terms: %d,%d" %(idx,pos))
  return Tensor(list(CA(**dict([x])) for x in triads15all(idx,pos).copyTerms()))

def triads15remain(phi):
  """triad15remain(phi)
     Return remainder of phi assuming correct parity. TBD"""
  Lib._checkType(phi, CA, "triads15remain")
  raise Exception("No remainder formula")

def triads15class(phi, id=False):
  """triad15class(phi, [id])
     Classify phi as <class=R/S/T/U/V/W/O> with parity & index in 30:128."""
  Lib._checkType(phi, CA, "triads15class")
  Lib._checkType(id, bool, "triads15class")
  aPhi = CA.tri2str(abs(phi))
  if aPhi not in Triads15:
    raise Exception("Abs. input phi to triads15class not found in Triads15")
  idx = Triads15.index(aPhi)
  idxSign,parity = phi.allSignsIndices()
  sgn = -1 if parity %2 else 1
  nac = nacs15subalg(aPhi, idxSign)
  clsName = Nacs15Name[nac]
  if id:
    return (clsName, -sgn, idx, int(idxSign))
  return "%s%s:%0.5f" %(clsName, "-" if parity %2 else "+", idx +idxSign/100000.0)

S15 = (-e456789ABCDEF, -e236789ABCDEF, -e234589ABCDEF, -e234567ABCDEF, -e23456789CDEF, -e23456789ABEF, -e23456789ABCD, -e135789ABCDEF, -e134689ABCDEF, -e1345679BCDEF, -e1345678ACDEF, -e13456789ABDF, -e13456789ABCE, -e125689ABCDEF, -e124789ABCDEF, -e1245679ACDEF, -e1245678BCDEF, -e12456789ABDE, -e12456789ABCF, -e1235679ABDEF, -e1235678ABCEF, -e12356789BCDF, -e12356789ACDE, -e1234679ABCEF, -e1234678ABDEF, -e12346789BCDE, -e12346789ACDF, -e1234579ABCDF, -e1234578ABCDE, -e12345789BDEF, -e12345789ACEF, -e1234569ABCDE, -e1234568ABCDF, -e12345689BCEF, -e12345689ADEF)
# S15**2 -35
SS15 = -2e1247 -2e1256 -2e128B -2e129A -2e12CF -2e12DE -2e1346 +6e1357 -2e138A +6e139B -2e13CE +6e13DF -2e148D -2e149C -2e14AF -2e14BE -2e158C +6e159D -2e15AE +6e15BF -2e168F -2e169E -2e16AD -2e16BC -2e178E +6e179F -2e17AC +6e17BD -2e2345 -2e2367 -2e2389 -2e23AB -2e23CD -2e23EF -2e248E -2e249F -2e24AC -2e24BD -2e258F -2e259E -2e25AD -2e25BC -2e268C -2e269D +6e26AE +6e26BF -2e278D -2e279C +6e27AF +6e27BE -2e348F -2e349E -2e34AD -2e34BC -2e358E -2e359F -2e35AC -2e35BD -2e368D -2e369C +6e36AF +6e36BE -2e378C -2e379D +6e37AE +6e37BF -2e4567 -2e4589 -2e45AB -2e45CD -2e45EF -2e468A -2e469B -2e46CE -2e46DF -2e478B -2e479A -2e47CF -2e47DE -2e568B -2e569A -2e56CF -2e56DE -2e578A -2e579B -2e57CE -2e57DF -2e6789 -2e67AB -2e67CD -2e67EF -2e89AB -2e89CD -2e89EF -2e8ACE -2e8ADF -2e8BCF -2e8BDE -2e9ACF -2e9ADE -2e9BCE -2e9BDF -2eABCD -2eABEF -2eCDEF

#X=sum(F15).allSigns(True) # with [20] being Sedenions
#for x in X: print(len(Tensor.Triads(*x.spin(f15Basis)).assocCycles(f15Basis,nonAssoc=True)))
na15 = (210, 210, 210, 210, 210, 210, 210, 210, 224, 200, 224, 200, 224, 200, 208, 208, 208, 208, 208, 208, 252, 228, 204, 180, 236, 236, 188, 188, 220, 196, 220, 196, 204, 204, 204, 204)
ia15 = (245, 245, 245, 245, 245, 245, 245, 245, 231, 255, 231, 255, 231, 255, 247, 247, 247, 247, 247, 247, 203, 227, 251, 275, 219, 219, 267, 267, 235, 259, 235, 259, 251, 251, 251, 251)
FF15 = (e12345689ADEF, e12345689BCEF, e1234568ABCDF, e1234569ABCDE, e12345789ACEF, e12345789BDEF, e1234578ABCDE, e1234579ABCDF, e12346789ACDF, e12346789BCDE, e1234678ABDEF, e1234679ABCEF, e12356789ACDE, e12356789BCDF, e1235678ABCEF, e1235679ABDEF, e12456789ABCF, e12456789ABDE, e1245678BCDEF, e1245679ACDEF, e124789ABCDEF, e125689ABCDEF, e13456789ABCE, e13456789ABDF, e1345678ACDEF, e1345679BCDEF, e134689ABCDEF, e135789ABCDEF, e23456789ABCD, e23456789ABEF, e23456789CDEF, e234567ABCDEF, e234589ABCDEF, e236789ABCDEF, e456789ABCDEF)
#FF15 = -e123456789ABCDEF *sum(FF15) # x=list(sum(F15).allSigns(21))[20] # x:35 -> xx:105 -> 33 terms:
#FFF1520 = sum(map(lambda x: CA(**dict([x])) if abs(x[1]) == 6 else 0, (x*x).copyTerms())).copyTerms()
FFF1520 = (-e1357, -e139B, -e13DF, e148D, e149C, e158C, -e159D, -e15BF, -e179F, -e17BD, e248E, e24AC, e268C, -e26AE, -e26BF, -e27AF, -e27BE, e348F, e34BC, -e36AF, -e36BE, e378C, -e37AE, -e37BF, e4589, e45CD, e468A, e46CE, e478B, e47CF, e89CD, e8ACE, e8BCF)
FFFF1520 = (-e1357, -e139B, -e13DF, -e15BF, -e179F, -e17BD, -e37BF, +e579B)
FFFFF1520 = (e1247, e1256, e128B, e129A, e12CF, e12DE, e1346, e138A, e13CE, e14AF, e14BE, e15AE, e168F, e169E, e16AD, e16BC, e178E, e17AC, e2345, e2367, e2389, e23AB, e23CD, e23EF, e249F, e24BD, e258F, e259E, e25AD, e25BC, e269D, e278D, e279C, e349E, e34AD, e358E, e359F, e35AC, e35BD, e368D, e369C, e379D, e4567, e45AB, e45EF, e469B, e46DF, e479A, e47DE, e568B, e569A, e56CF, e56DE, e578A, e579B, e57CE, e57DF, e6789, e67AB, e67CD, e67EF, e89AB, e89EF, e8ADF, e8BDE, e9ACF, e9ADE, e9BCE, e9BDF, eABCD, eABEF, eCDEF)

# Tensor.Table(O.Basis(4)).morph(O.Basis(4),f15Basis).dump(f15Basis)
SE15 = Tensor( \
 ("-1","-f3", "f2","-f5", "f4", "f7","-f6","-f9", "f8", "fB","-fA", "fD","-fC","-fF", "fE"),
 ( "f3", "-1","-f1","-f6","-f7", "f4", "f5","-fA","-fB", "f8", "f9", "fE", "fF","-fC","-fD"),
 ("-f2", "f1", "-1","-f7", "f6","-f5", "f4","-fB", "fA","-f9", "f8", "fF","-fE", "fD","-fC"),
 ( "f5", "f6", "f7", "-1","-f1","-f2","-f3","-fC","-fD","-fE","-fF", "f8", "f9", "fA", "fB"),
 ("-f4", "f7","-f6", "f1", "-1", "f3","-f2","-fD", "fC","-fF", "fE","-f9", "f8","-fB", "fA"),
 ("-f7","-f4", "f5", "f2","-f3", "-1", "f1","-fE", "fF", "fC","-fD","-fA", "fB", "f8","-f9"),
 ( "f6","-f5","-f4", "f3", "f2","-f1", "-1","-fF","-fE", "fD", "fC","-fB","-fA", "f9", "f8"),
 ( "f9", "fA", "fB", "fC", "fD", "fE", "fF", "-1","-f1","-f2","-f3","-f4","-f5","-f6","-f7"),
 ("-f8", "fB","-fA", "fD","-fC","-fF", "fE", "f1", "-1", "f3","-f2", "f5","-f4","-f7", "f6"),
 ("-fB","-f8", "f9", "fE", "fF","-fC","-fD", "f2","-f3", "-1", "f1", "f6", "f7","-f4","-f5"),
 ( "fA","-f9","-f8", "fF","-fE", "fD","-fC", "f3", "f2","-f1", "-1", "f7","-f6", "f5","-f4"),
 ("-fD","-fE","-fF","-f8", "f9", "fA", "fB", "f4","-f5","-f6","-f7", "-1", "f1", "f2", "f3"),
 ( "fC","-fF", "fE","-f9","-f8","-fB", "fA", "f5", "f4","-f7", "f6","-f1", "-1","-f3", "f2"),
 ( "fF", "fC","-fD","-fA", "fB","-f8","-f9", "f6", "f7", "f4","-f5","-f2", "f3", "-1","-f1"),
 ("-fE", "fD", "fC","-fB","-fA", "f9","-f8", "f7","-f6", "f5", "f4","-f3","-f2", "f1", "-1"))

# Sedenions from Wikipedia (= Cawagas)
# SE15.search(f15Basis,SO15,initPerm=[1, 2, -3, 6, 7, 4, 5]) -> FOUND at 4107 [..., -8, 9, 10, -11, 14, 15, 12, 13]
# Tensor.Table(O.Basis(4)).isomorph(O.Basis(4),[1, 2, -3, 6, 7, 4, 5, -8, 9, 10, -11, 14, 15, 12, 13]).morph(O.Basis(4),f15Basis)
# (f1, f2,  f3,  f4,  f5,   f6, f7,   f8, f9,  fA,   fB,   fC,   fD,    fE,  fF)
# (o1, o2, -o12, o23, o123, o3, o13, -o4, o14, o24, -o124, o234, o1234, o34, o134)
SO15 = Tensor( \
 ("-1", "f3",  "-f2","f5",  "-f4", "-f7", "f6",  "f9",  "-f8", "-fB", "fA",  "-fD", "fC",  "fF",  "-fE"),
 ("-f3","-1",  "f1", "f6",  "f7",  "-f4", "-f5", "fA",  "fB",  "-f8", "-f9", "-fE", "-fF", "fC",  "fD"),
 ("f2", "-f1", "-1", "f7",  "-f6", "f5",  "-f4", "fB",  "-fA", "f9",  "-f8", "-fF", "fE",  "-fD", "fC"),
 ("-f5","-f6", "-f7","-1",  "f1",  "f2",  "f3",  "fC",  "fD",  "fE",  "fF",  "-f8", "-f9", "-fA", "-fB"),
 ("f4", "-f7", "f6", "-f1", "-1",  "-f3", "f2",  "fD",  "-fC", "fF",  "-fE", "f9",  "-f8", "fB",  "-fA"),
 ("f7", "f4",  "-f5","-f2", "f3",  "-1",  "-f1", "fE",  "-fF", "-fC", "fD",  "fA",  "-fB", "-f8", "f9"),
 ("-f6","f5",  "f4", "-f3", "-f2", "f1",  "-1",  "fF",  "fE",  "-fD", "-fC", "fB",  "fA",  "-f9", "-f8"),
 ("-f9","-fA", "-fB","-fC", "-fD", "-fE", "-fF", "-1",  "f1",  "f2",  "f3",  "f4",  "f5",  "f6",  "f7"),
 ("f8", "-fB",  "fA","-fD", "fC",  "fF",  "-fE", "-f1", "-1",  "-f3", "f2",  "-f5", "f4",  "f7",  "-f6"),
 ("fB", "f8",  "-f9","-fE", "-fF", "fC",  "fD",  "-f2", "f3",  "-1",  "-f1", "-f6", "-f7", "f4",  "f5"),
 ("-fA","f9",  "f8", "-fF", "fE",  "-fD", "fC",  "-f3", "-f2", "f1",  "-1",  "-f7", "f6",  "-f5", "f4"),
 ("fD", "fE",  "fF", "f8",  "-f9", "-fA", "-fB", "-f4", "f5",  "f6",  "f7",  "-1",  "-f1", "-f2", "-f3"),
 ("-fC","fF",  "-fE","f9",  "f8",  "fB",  "-fA", "-f5", "-f4", "f7",  "-f6", "f1",  "-1",  "f3",  "-f2"),
 ("-fF","-fC", "fD", "fA",  "-fB", "f8",  "f9",  "-f6", "-f7", "-f4", "f5",  "f2",  "-f3", "-1",  "f1"),
 ("fE", "-fD", "-fC","fB",  "fA",  "-f9", "f8",  "-f7", "f6",  "-f5", "-f4", "f3",  "f2",  "-f1", "-1"))

phi15 = e123 +e145 +e167 +e189 +e1AB +e1CD +e1EF +e246 +e257 +e28A +e29B +e2CE +e2DF +e347 +e356 +e38B +e39A \
       +e3CF +e3DE -e48C +e49D +e4AE +e4BF +e58D +e59C +e5AF +e5BE +e68E +e69F +e6AC +e6BD +e78F +e79E +e7AD +e7BC

