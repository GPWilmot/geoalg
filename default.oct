import datetime

q0 = ("i", "j", "k")
a7 = ("e1", "e2", "e3", "e4", "e5", "e6", "e7")

# Actual(a7) = Tensor.Table(O.Basis(3)).morphO.Basis(3), a7)
A7 = Tensor(
      ("-1", "-e3","e2", "-e5", "e4", "e7", "-e6"), 
      ("e3", "-1", "-e1","-e6", "-e7","e4", "e5"),
      ("-e2","e1", "-1", "-e7", "e6", "-e5","e4"),
      ("e5", "e6", "e7", "-1",  "-e1","-e2","-e3"),
      ("-e4","e7", "-e6","e1",  "-1", "e3", "-e2"),
      ("-e7","-e4","e5", "e2",  "-e3","-1", "e1"),
      ("e6", "-e5","-e4", "e3", "e2", "-e1","-1"))

# Wikipedia: C7==Tensor.Table(c7).morph(c7,a7)==A7.transpose() where
c7=Tensor(O.Basis(3)).permute([-1, -2, -3, 4, 5, 6, 7], invert=True)
C7 = (("-1", "e3", "-e2", "e5", "-e4", "-e7", "e6"),
      ("-e3", "-1", "e1", "e6", "e7", "-e4", "-e5"),
      ("e2", "-e1", "-1", "e7", "-e6", "e5", "-e4"),
      ("-e5", "-e6", "-e7", "-1", "e1", "e2", "e3"),
      ("e4", "-e7", "e6", "-e1", "-1", "-e3", "e2"),
      ("e7", "e4", "-e5", "-e2", "e3", "-1", "-e1"),
      ("-e6", "e5", "e4", "-e3", "-e2", "e1", "-1"))

# Baez-The Octonions: B7==Tensor.Table(e7).morph(b7,a7) where
b7=Tensor(O.Basis(3)).permute([-1, 2, 4, 3, 7, -5, 6], invert=True)
B7 = (("-1", "e4", "e7", "-e2", "e6", "-e5", "-e3"),
      ("-e4", "-1", "e5", "e1", "-e3", "e7", "-e6"),
      ("-e7", "-e5", "-1", "e6", "e2", "-e4", "e1"),
      ("e2", "-e1", "-e6", "-1", "e7", "e3", "-e5"),
      ("-e6", "e3", "-e2", "-e7", "-1", "e1", "e4"),
      ("e5", "-e7", "e4", "-e3", "-e1", "-1", "e2"),
      ("e3", "e6", "-e1", "e5", "-e4", "-e2", "-1"))


# Split Octonions from Wiki = Tensor(SO).dump(so)
so = ("i",  "j",   "k",   "l",   "li", "lj",  "lk")
SO = (("-1", "k",  "-j",  "-li", "l",  "-lk", "lj"),
     ("-k", "-1",  "i",   "-lj", "lk", "l",   "-li"),
     ("j",  "-i",  "-1",  "-lk", "-lj","li",  "l"),
     ("li", "lj",  "lk",  "1",   "i",  "j",   "k"),
     ("-l", "-lk", "lj",  "-i",  "1",  "k",   "-j"),
     ("lk", "-l",  "-li", "-j",  "-k", "1",   "i"),
     ("-lj", "li", "-l",  "-k",  "j",  "-i",  "1"))
# Tensor.Table(O.Basis(2,1)).search(O.Basis(2,1),Tensor(SO),so,num=-1)
# First match=[-1, 2, 3, 4, -5, 6, 7] -> Tensor.Table(so21).morph(so21,so)==SO if
so21 = Tensor(O.Basis(2,1)).permute([-1, 2, 3, 4, -5, 6, 7], invert=True)
# Tensor.Table(O.Basis(1,2)).search(O.Basis(1,2),Tensor(SO),so,cycles=False,num=-1)
# First match=[1, -4, -5, 6, 7, 2, 3] -> Tensor.Table(so12).morph(so12,so)==SO if
so12 = Tensor(O.Basis(1,2)).permute([1, -4, -5, 6, 7, 2, 3], invert=True)
# Tensor.Table(O.Basis(0,3)).search(O.Basis(0,3),Tensor(SO),so,cycles=False,num=-1)
# First match=[-4, 5, 1, 6, 2, -3, 7] -> Tensor.Table(so03).morph(so03,so)==SO if
so03 = Tensor(O.Basis(0,3)).permute([-4, 5, 1, 6, 2, -3, 7], invert=True)

# Sedenions from Wikipedia (= Cawagas)
# Tensor.Table(O.Basis(4)).search(O.Basis(4),S15,s15,num=-1,initPerm=[-1,-2,-3,4,5,6,7])
# Finds permutation for ss15 s.t. Tensor.Table(ss15).morph(se15,s15)==S15 if
se15 = Tensor(O.Basis(4)).permute([-1,-2,-3,4,5,6,7,-8,-9,-10,-11,12,13,14,15], invert=True)
s15=("e1","e2","e3","e4","e5","e6","e7","e8","e9","e10","e11","e12","e13","e14","e15")
S15 = Tensor(
  ("-1",  "e3",  "-e2", "e5",  "-e4", "-e7", "e6",  "e9", "-e8", "-e11","e10", "-e13","e12", "e15","-e14"),
  ("-e3", "-1",  "e1",  "e6",  "e7",  "-e4", "-e5", "e10","e11", "-e8", "-e9", "-e14","-e15","e12","e13"),
  ("e2",  "-e1", "-1",  "e7",  "-e6", "e5",  "-e4", "e11","-e10","e9",  "-e8", "-e15","e14","-e13","e12"),
  ("-e5", "-e6", "-e7", "-1",  "e1",  "e2",  "e3",  "e12","e13", "e14", "e15", "-e8","-e9", "-e10","-e11"),
  ("e4",  "-e7", "e6",  "-e1", "-1",  "-e3", "e2",  "e13","-e12","e15", "-e14","e9", "-e8", "e11", "-e10"),
  ("e7",  "e4",  "-e5", "-e2", "e3",  "-1",  "-e1", "e14","-e15","-e12","e13", "e10","-e11","-e8", "e9"),
  ("-e6", "e5",  "e4",  "-e3", "-e2", "e1",  "-1",  "e15","e14", "-e13","-e12","e11","e10", "-e9", "-e8"),
  ("-e9", "-e10","-e11","-e12","-e13","-e14","-e15","-1", "e1",  "e2",  "e3",  "e4", "e5",  "e6",  "e7"),
  ("e8",  "-e11","e10", "-e13","e12", "e15", "-e14","-e1","-1",  "-e3", "e2",  "-e5","e4",  "e7",  "-e6"),
  ("e11", "e8",  "-e9", "-e14","-e15","e12", "e13", "-e2","e3",  "-1",  "-e1", "-e6","-e7", "e4",  "e5"),
  ("-e10","e9",  "e8",  "-e15","e14", "-e13","e12", "-e3","-e2", "e1",  "-1",  "-e7","e6",  "-e5", "e4"),
  ("e13", "e14", "e15", "e8",  "-e9", "-e10","-e11","-e4","e5",  "e6",  "e7",  "-1", "-e1", "-e2", "-e3"),
  ("-e12","e15", "-e14","e9",  "e8",  "e11", "-e10","-e5","-e4", "e7",  "-e6", "e1", "-1",  "e3",  "-e2"),
  ("-e15","-e12","e13", "e10", "-e11","e8",  "e9",  "-e6","-e7", "-e4", "e5",  "e2", "-e3", "-1",  "e1"),
  ("e14", "-e13","-e12","e11", "e10", "-e9", "e8",  "-e7","e6",  "-e5", "-e4", "e3", "e2",  "-e1", "-1"))

