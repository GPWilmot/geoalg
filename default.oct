import datetime

def tt(basis):
  for idx,t in enumerate(Common.triads(3)):
    print(idx, Tensor(A7).search(basis,Tensor.Triads(t,basis),diffs=2,dump=0))

# Tensor(mt1).search(m0,Tensor.Triads(t,m0) for all triads(3) for all m0=[1,2,{p5+2}]
# =triads[10,19]p5=[1,2,3,4,5]
# =triads[10]p5=[1,2,5,3,4]
# =triads[19]p5=[1,4,2,3,5]
# =triads[10]p5=[1,4,3,5,2]
# =triads[10]p5=[2,3,1,4,5]
# =triads[19]p5=[3,1,4,5,2]
# =triads[10]p5=[3,4,1,2,5]
# =triads[10]p5=[3,4,2,5,1]
# =triads[19,19][4,2,1,3,5]
# =triads[0][4,2,3,5,1]
# =triads[10][4,5,3,1,2]
# =triads[10][5,2,1,4,3]
# =triads[10][5,3,2,4,1]

# Some important Common.triads(3) where tx=triads[x]:
t1 = [[1, 2, 3], [1, 4, 5], [1, 6, 7], [2, 4, 6], [2, 5, 7], [3, 4, 7], [3, 5, 6]]
t6 = [[1, 2, 4], [1, 3, 5], [1, 6, 7], [2, 3, 6], [2, 5, 7], [3, 4, 7], [4, 5, 6]]
t10 = [[1, 2, 4], [1, 3, 7], [1, 5, 6], [2, 3, 5], [2, 6, 7], [3, 4, 6], [4, 5, 7]]
t19 = [[1, 2, 6], [1, 3, 4], [1, 5, 7], [2, 3, 7], [2, 4, 5], [3, 5, 6], [4, 6, 7]]
# NB: load;Tensor(MX).search(m2x,Tensor.Triads(t0,m1),m1,diffs=1) at num=0 and 9 others

q0 = ["i", "j", "k"]
m0 = [o1, o2, o12, o3, o13, o23, o123]   # = O.Basis(3) cf m7
m1 = [o1, o2, o12, o123, o3, o13, o23]
m2 = [o1, o2, o3, o12, o13, o23, o123]
m9 = [o23, o3, o12, o2, o123, o1, o13] # Basis for E7
m3 = ["i", "j", "k", "i1", "j1", "k1", "l"]
m4 = ["i", "j", "k", "l", "i1", "j1", "k1"]
m5 = ["i", "j", "i1", "k", "i1", "j1", "l"]
m6 = ["e1", "e2", "e4", "e3", "e5", "e6", "e7"]
m7 = ["e1", "e2", "e4", "e7", "e3", "e5", "e6"]
m8 = ["e1", "e2", "e3", "e4", "e5", "e6", "e7"]
s1 = ["i", "j", "k", "p1", "i1", "j1", "k1", "p2", "i2", "j2", "k2", "p3", "i3", "j3", "k3"]

qt0 = (("-1", "k", "-j"),
      ("-k", "-1", "i"),
      ("j", "-i", "-1"))
mt1 = (("-1",  "k",   "-j",  "i1", "-l", "-k1", "j1"), # Paper = A7(m4).isomorph([1,2,-3,6,7,4,5]) 92 times
      ("-k",  "-1",  "i",   "j1", "k1",  "-l", "-i1"), #  != A7.search(m3 or m5)
      ("j",   "-i",  "-1",  "k1", "-j1", "i1",  "-l"), #
      ("-i1", "-j1", "-k1", "-1", "i",   "j",   "k"),  #=trials[10,19](m4)
      ("l",  "-k1", "j1",  "-i", "-1",  "-k",  "j"),   #triads[none](m3,m5)
      ("k1",  "l",  "-i1", "-j", "k",  "-1",  "-i"),
      ("-j1", "i1",  "l",  "-k", "-j",  "i",   "-1"))
mt2 = (("-1", "l",  "k1",  "-j",  "j1",  "-i1", "-k"), # IJKL = A7(m4).isomorph(m4,[6,4,3,2,7,1,5] 7 times
      ("-l", "-1",  "i1",  "i",   "-k",  "k1",  "-j1"),# != A7.search(m3 or m5)
      ("-k1", "-i1", "-1",  "j1",  "j",   "-l", "i"),  # 
      ("j",   "-i",  "-j1", "-1",  "k1",  "k",  "-i1"),#=trials[10,19](m4) 92,7times
      ("-j1", "k",   "-j",  "-k1", "-1",  "i",  "l"),  #triads[none](m3,m5)
      ("i1",  "-k1", "l",  "-k",  "-i",  "-1",  "j"),
      ("k",   "j1",  "-i",  "i1",  "-l", "-j",  "-1"))

A7 = (("-1", "-e3","e2", "-e5", "e4", "e7", "-e6"), # Actual(m8) = Matrix.Basis(O.Basis(3))
      ("e3", "-1", "-e1","-e6", "-e7","e4", "e5"),  # =Triads(t10/t19,m8) 7/12 times
      ("-e2","e1", "-1", "-e7", "e6", "-e5","e4"),  # =perm=range(1,8)
      ("e5", "e6", "e7", "-1",  "-e1","-e2","-e3"),
      ("-e4","e7", "-e6","e1",  "-1", "e3", "-e2"),
      ("-e7","-e4","e5", "e2",  "-e3","-1", "e1"),
      ("e6", "-e5","-e4", "e3", "e2", "-e1","-1"))

C7 = (("-1", "e3", "-e2", "e5", "-e4", "-e7", "e6"), # A7(m8) = C7.isomorph(m8,[1,2,-3,6,7,4,5]) 92 times
      ("-e3", "-1", "e1", "e6", "e7", "-e4", "-e5"), # ie = A7.swap(m0,m8)
      ("e2", "-e1", "-1", "e7", "-e6", "e5", "-e4"), # != A7.search(m6 or m7)
      ("-e5", "-e6", "-e7", "-1", "e1", "e2", "e3"),
      ("e4", "-e7", "e6", "-e1", "-1", "-e3", "e2"),
      ("e7", "e4", "-e5", "-e2", "e3", "-1", "-e1"),
      ("-e6", "e5", "e4", "-e3", "-e2", "e1", "-1"))

E7 = (("-1", "e4", "e7", "-e2", "e6", "-e5", "-e3"), # A7(m8) = E7.isomorph(m8,[6,4,3,2,7,1,5]) 7 times
      ("-e4", "-1", "e5", "e1", "-e3", "e7", "-e6"), #  =mt2(m4) = Baes paper, range(1,8)
      ("-e7", "-e5", "-1", "e6", "e2", "-e4", "e1"), # != A7.search(m6 or m7)
      ("e2", "-e1", "-e6", "-1", "e7", "e3", "-e5"), # E7 = Matrix.Table(m9).swap(m9,m8)
      ("-e6", "e3", "-e2", "-e7", "-1", "e1", "e4"),
      ("e5", "-e7", "e4", "-e3", "-e1", "-1", "e2"),
      ("e3", "e6", "-e1", "e5", "-e4", "-e2", "-1"))

MM = (( -1,  o12,  o13,  -o2,   -o3, o123, -o23),   #mt0(m4)???
     (-o12,   -1,  o23,   o1, -o123,  -o3,  o13),   # != A7.search(m0,m1,m2)
     (-o13, -o23,   -1, o123,    o1,   o2, -o12),
     (  o2,  -o1, -o123,  -1,   o23, -o13,   o3),
     (  o3, o123,  -o1, -o23,    -1,  o12,  -o2),
     (-o123,  o3,  -o2,  o13,  -o12,   -1,   o1),
     ( o23, -o13,  o12,  -o3,    o2,  -o1,   -1))
MX = (( -1,  o12,  o13,  -o2,   -o3, o123, -o23),   #t[6](m3) = diffs>=6
     (-o12,   -1,  o23,   o1, -o123*-1,  -o3,  o13*-1),
     (-o13, -o23,   -1, o123,    o1,   o2, -o12),
     (  o2,  -o1, -o123,  -1,   o23, -o13,   o3),
     (  o3, o123*-1,  -o1, -o23,    -1,  o12,  -o2*-1),
     (-o123,  o3,  -o2,  o13,  -o12,   -1,   o1),
     ( o23, -o13*-1,  o12,  -o3,    o2*-1,  -o1,   -1))
s7 = (o1, o2, o12, u3, o1u3, o2u3, o12u3) # ~O.Basis(2,1)
s8 = (o1, o2, o12, o3, o13, o23, o123) # ~O.Basis(3)
s9 = (o1, o2, o12, u3, o1u3, o2u3, o12u3) # ~O.Basis(2,1)

# Split Octonians Matrix.Table(O.Basis(2,1)).search(O.Basis(2,1),Matrix(SO),so,diffs=9)
so = ("i",  "j",   "k",   "l",   "li", "lj",  "lk")
SO = (("-1", "k",  "-j",  "-li", "l",  "-lk", "lj"),
     ("-k", "-1",  "i",   "-lj", "lk", "l",   "-li"),
     ("j",  "-i",  "-1",  "-lk", "-lj","li",  "l"),
     ("li", "lj",  "lk",  "1",   "i",  "j",   "k"),
     ("-l", "-lk", "lj",  "-i",  "1",  "k",   "-j"),
     ("lk", "-l",  "-li", "-j",  "-k", "1",   "i"),
     ("-lj", "li", "-l",  "-k",  "j",  "-i",  "1"))

# Baez: o1    o2   o12    o3   o13   o23  o123
B7o = ((-1.0, -o12,  o2,  -o13,   o3,    o123,  -o23),
       (o12,  -1.0,  -o1, -o23,   -o123, o3,    o13),
       (-o2,  o1,   -1.0, -o123,  o23,   -o13,  o3),
       (o13,  o23,  o123, -1.0,   -o1,   -o2,   -o12),
       (-o3,  o123, -o23,  o1,    -1.0,   o12,  -o2),
       (-o123, -o3, o13,   o2,    -o12,  -1.0,  o1),
       (o23,  -o13, -o3,   o12,   o2,    -o1,   -1.0))
# Wiki: o1,    o2,  o12,   o3,    o13,   o23,   o123))
W7o = ((-1.0,  o12,   -o2,   o13,    -o3,   -o123,  o23), # = B7o.transpose
       (-o12,  -1.0,  o1,    o23,    o123,  -o3,    -o13),
       (o2,    -o1,   -1.0,  o123,   -o23,   o13,   -o3),
       (-o13,  -o23,  -o123, -1.0,   o1,     o2,    o12),
       (o3,    -o123, o23,   -o1,    -1.0,   -o12,  o2),
       (o123,  o3,    -o13,  -o2,    o12,    -1.0,  -o1),
       (-o23,  o13,   o3,    -o12,   -o2,    o1,    -1.0))
# C7:  o1,     o2,    o12,    o3,    o13,    o23,   o123
C7o =((-1,     o3,    -o2,    o13,   -o12,   -o123, o23),
      (-o3,   -1,     o1,     o23,   o123,   -o12,  -o13),
      (o2,    -o1,    -1,     o123,  -o23,   o13,   -o12),
      (-o13,  -o23,   -o123,  -1,    o1,     o2,    o3),
      (o12,   -o123,  o23,    -o1,   -1,     -o3,   o2),
      (o123,   o12,   -o13,   -o2,    o3,    -1,    -o1),
      (-o23,   o13,   o12,    -o3,   -o2,    o1,    -1))
W71 = ((1.0,     o12,     o2,    o13,     o3,  -o123,   -o23),
       (-o12,   -1.0,     o1,    o23,   o123,    -o3,   -o13),
        (-o2,    -o1,    1.0,   o123,    o23,    o13,     o3),
       (-o13,   -o23,  -o123,   -1.0,     o1,     o2,    o12),
        (-o3,  -o123,   -o23,    -o1,    1.0,   -o12,    -o2),
       (o123,     o3,   -o13,    -o2,    o12,   -1.0,    -o1),
        (o23,    o13,    -o3,   -o12,     o2,     o1,    1.0))
W72 = ((-1.0,    o12,    -o2,    o13,    -o3,  -o123,    o23),
       (-o12,    1.0,    -o1,    o23,   o123,     o3,    o13),
         (o2,     o1,    1.0,   o123,   -o23,   -o13,     o3),
       (-o13,   -o23,  -o123,   -1.0,     o1,     o2,    o12),
         (o3,  -o123,    o23,    -o1,   -1.0,   -o12,     o2),
       (o123,    -o3,    o13,    -o2,    o12,    1.0,     o1),
       (-o23,   -o13,    -o3,   -o12,    -o2,    -o1,    1.0))
W73 = ((-1.0,    o12,    -o2,    o13,    -o3,  -o123,    o23),
       (-o12,   -1.0,     o1,    o23,   o123,    -o3,   -o13),
         (o2,    -o1,   -1.0,   o123,   -o23,    o13,    -o3),
       (-o13,   -o23,  -o123,    1.0,    -o1,    -o2,   -o12),
         (o3,  -o123,    o23,     o1,    1.0,    o12,    -o2),
       (o123,     o3,   -o13,     o2,   -o12,    1.0,     o1),
       (-o23,    o13,     o3,    o12,     o2,    -o1,    1.0))
W723 = ((-1.0,    o12,   -o2,    o13,    -o3,  -o123,    o23),
        (-o12,    1.0,   -o1,    o23,   o123,     o3,    o13),
        (o2,       o1,   1.0,   o123,   -o23,   -o13,     o3),
        (-o13,   -o23, -o123,    1.0,    -o1,    -o2,   -o12),
        (o3,    -o123,   o23,     o1,    1.0,    o12,    -o2),
        (o123,    -o3,   o13,     o2,   -o12,   -1.0,    -o1),
        (-o23,   -o13,   -o3,    o12,     o2,     o1,   -1.0))
W713 = ((1.0,     o12,    o2,    o13,     o3,  -o123,   -o23),
        (-o12,   -1.0,    o1,    o23,   o123,    -o3,   -o13),
        (-o2,     -o1,   1.0,   o123,    o23,    o13,     o3),
        (-o13,   -o23, -o123,    1.0,    -o1,    -o2,   -o12),
        (-o3,   -o123,  -o23,     o1,   -1.0,    o12,     o2),
        (o123,     o3,  -o13,     o2,   -o12,    1.0,     o1),
        (o23,     o13,   -o3,    o12,    -o2,    -o1,   -1.0))
W712 = ((1.0,     o12,    o2,    o13,     o3,  -o123,   -o23),
        (-o12,    1.0,   -o1,    o23,   o123,     o3,    o13),
        (-o2,      o1,  -1.0,   o123,    o23,   -o13,    -o3),
        (-o13,   -o23, -o123,   -1.0,     o1,     o2,    o12),
        (-o3,   -o123,  -o23,    -o1,    1.0,   -o12,    -o2),
        (o123,    -o3,   o13,    -o2,    o12,    1.0,     o1),
        (o23,    -o13,    o3,   -o12,     o2,    -o1,   -1.0))
# C7:    o1,     o2,    o12,    o3,    o13,    o23,   o123
W7123= ((1.0,     o12,    o2,    o13,     o3,  -o123,   -o23),
        (-o12,    1.0,   -o1,    o23,   o123,     o3,    o13),
         (-o2,     o1,  -1.0,   o123,    o23,   -o13,    -o3),
        (-o13,   -o23, -o123,    1.0,    -o1,    -o2,   -o12),
         (-o3,  -o123,  -o23,     o1,   -1.0,    o12,     o2),
        (o123,    -o3,   o13,     o2,   -o12,   -1.0,    -o1),
         (o23,   -o13,    o3,    o12,    -o2,     o1,    1.0))

x1 = sum(O.Basis(3))
x2 = sum((O(**{x[1]: x[0]+1}) for x in enumerate(O.BasisArgs(3))))
