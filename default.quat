def p(a,b,c,s=5.0): r=list(x/s for x in range(-10,11));plt.plot(r,(0,)*21); plt.plot(r,list(a*x*x +b*x +c for x in r)); plt.plot(r,list(-a*x*x -b*x +c -b*b/2/a for x in r)); plt.show()
def q(a,b,c,x): return (a*x*x +b*x +c, -a*x*x -b*x +c -b*b/2/a)
def r(a,b,c): d0=b*b -4*a*c; d1=b*b +4*a*(c -b*b/2/a); d=(math.sqrt(d0), Q(0,math.sqrt(-d1))) if d0>=0 else (Q(0,math.sqrt(-d0)), math.sqrt(d1)); return ((-b +d[0])/2/a, (-b -d[0])/2/a, str((-b -d[1])/2/a), str((-b +d[1])/2/a)) if d0>=0 else (str((-b +d[0])/2/a), str((-b -d[0])/2/a), (-b -d[1])/2/a, (-b +d[1])/2/a)
def c(a,b,c): return c -b*b/2/a
#Q.Quad(-2,-2,1)

def a(nDim):
  return list((Q.BasisArgs(nDim)))
def aa(m):
  """Print multiply table in the order given by m as dim or list."""
  basis = Q.BasisArgs(m) if isinstance(m, int) else m
  return Tensor.Table(basis)

G,P,N = Tensor.Rotations(Tensor(1,0,0), Tensor(0,1,2) /sqrt(5))
p=Tensor(1,2,3)
p0=P*p
p1=p-p0
a=Q(0,1)
b=Q(0,0,1,2) /sqrt(5)
x=Q(0,1,2,3)
x0=Q(0,1,1.6,3.2)
x1=Q(0,0,0.4,-0.2)
#(a*b)*x((a*b) == x0 - x1
# x = x0 +x1
ab = a.cross(b)
x0 = (x + ab*x*ab) /2
x1 = (x - ab*x*ab) /2

