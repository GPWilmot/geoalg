########################################
## Check n-D matrix rotations against CA
## File: default.sym - G.P.Wilmot
########################################

#########################################################
# https://personal.utdallas.edu/~sxb027100/dock/quaternion.html
# Q==Q0 [verified for fixQ(.5,.7,1,d=2.0) then load again]
# [verified Q[1:3][1:3] = Q.Euler(.5,.7,1).eulerMatrix()]

L = Tensor((w,-x,-y,-z),(x,w,-z,y),(y,z,w,-x),(z,-y,x,w))
R = Tensor((w,x,y,z),(-x,w,-z,y),(-y,z,w,-x),(-z,-y,x,w))
Q = R * L # = R(q)*L(q^-1)
Lx = Tensor((cx,-sx,0,0),(sx,cx,0,0),(0,0,cx,-sx),(0,0,sx,cx))
Rx = Tensor((cx,sx,0,0),(-sx,cx,0,0),(0,0,cx,-sx),(0,0,sx,cx)) # e23
Ly = Tensor((cy,0,-sy,0),(0,cy,0,sy),(sy,0,cy,0),(0,-sy,0,cy))
Ry = Tensor((cy,0,sy,0),(0,cy,0,sy),(-sy,0,cy,0),(0,-sy,0,cy)) # e13
Lz = Tensor((cz,0,0,-sz),(0,cz,-sz,0),(0,sz,cz,0),(sz,0,0,cz))
Rz = Tensor((cz,0,0,sz),(0,cz,-sz,0),(0,sz,cz,0),(-sz,0,0,cz)) # e12
Qx = Rx * Lx
Qy = Ry * Ly
Qz = Rz * Lz
Q0 = Qz*Qy*Qx

def fixQ(roll,pitch,yaw,d=1.0):
  global cx
  global sx
  global cy
  global sy
  global cz
  global sz
  sx,cx=Lib.sincos(roll/d)
  sy,cy=Lib.sincos(pitch/d)
  sz,cz=Lib.sincos(yaw/d)
  if not Lib.isCalc("CA"):
    raise Exception("CA must be loaded to use fixQ")
  else:
    global tmp
    tmp = CA.Euler(roll, pitch, yaw)
    global w
    global x
    global y
    global z
    w = tmp.scalar()
    x = -tmp.sym(S(CA(e32=1)))
    y = -tmp.sym(S(CA(e13=1)))
    z = -tmp.sym(S(CA(e21=1)))

#########################################################
# Code to derive the matrix last column expansion to
# matrix Euler angles from matrix and from CA.Euler.
# Used E4,5,6,7 to derive code
# [verified E4,5,6,7 with fixQ(.5,.7,1);fixE()]

def fixE():
  global c14
  global s14
  global c24
  global s24
  global c34
  global s34
  global c15
  global s15
  global c25
  global s25
  global c35
  global s35
  global c54
  global s54
  s14,c14=Lib.sincos(.11)
  s24,c24=Lib.sincos(.12)
  s34,c34=Lib.sincos(.13)
  s15,c15=Lib.sincos(.14)
  s25,c25=Lib.sincos(.15)
  s35,c35=Lib.sincos(.16)
  s54,c54=Lib.sincos(.17)

def matE(dim, idx1, idx2):
  m = Tensor.Diag([1] *dim)
  m[idx1 -1][idx1 -1] = S("c%d%d" %(idx1, idx2))
  m[idx1 -1][idx2 -1] = S("s%d%d" %(idx1, idx2))
  m[idx2 -1][idx1 -1] = S("-s%d%d" %(idx1, idx2))
  m[idx2 -1][idx2 -1] = S("c%d%d" %(idx1, idx2))
  return m

def matQ(dim, QQ):
  m = Tensor.Diag([1] *dim)
  siz = len(QQ)
  for ii in range(siz):
    for jj in range(siz):
      m[ii][jj] = QQ[ii][jj]
  return m

def lastCol(QQ):
  siz = len(QQ)
  return map(lambda x: x[S(siz) -1], QQ)

Ex = Tensor((1,0,0,0),(0,cx,-sx,0),(0,sx,cx,0),(0,0,0,1))
Ey = Tensor((cy,0,sy,0),(0,1,0,0),(-sy,0,cy,0),(0,0,0,1))
Ez = Tensor((cz,-sz,0,0),(sz,cz,0,0),(0,0,1,0),(0,0,0,1))
E14 = Tensor((c14,0,0,s14),(0,1,0,0),(0,0,1,0),(-s14,0,0,c14))
E24 = Tensor((1,0,0,0),(0,c24,0,s24),(0,0,1,0),(0,-s24,0,c24))
E34 = Tensor((1,0,0,0),(0,1,0,0),(0,0,c34,s34),(0,0,-s34,c34))
I14 = Tensor((c14,0,0,-s14),(0,1,0,0),(0,0,1,0),(s14,0,0,c14))
I24 = Tensor((1,0,0,0),(0,c24,0,-s24),(0,0,1,0),(0,s24,0,c24))
I34 = Tensor((1,0,0,0),(0,1,0,0),(0,0,c34,-s34),(0,0,s34,c34))
I = I14 * I24 *I34
Q3 = Ez *Ey *Ex
Q4 = matQ(4, Q3)
E4 = E34 *E24 *E14
# Last column gives 4-D angles
#print("E4:", list(lastCol(E4 *Q4)), E4.transpose() *(E4 *Q4) == Q4)
E15=matE(5,1,5)
E25=matE(5,2,5)
E35=matE(5,3,5)
E45=matE(5,5,4)
Q5 = matQ(5, Q3)
E5 = E45 *E35 *E25 *E15
#print("E5:", list(lastCol(E5 *Q5)), E5.transpose() *(E5 *Q5) == Q5)
E16=matE(6,1,6)
E26=matE(6,2,6)
E36=matE(6,3,6)
E46=matE(6,6,4)
E56=matE(6,6,5)
Q6 = matQ(6,Q3)
E6 = E56 *E46 *E36 *E26 *E16
#print("E6:", list(lastCol(E6 *Q6)), E6.transpose() *(E6 *Q6) == Q6)
E17=matE(7,1,7)
E27=matE(7,2,7)
E37=matE(7,3,7)
E47=matE(7,7,4)
E57=matE(7,7,5)
E67=matE(7,7,6)
Q7 = matQ(7,Q3)
E7 = E67 *E57 *E47 *E37 *E27 *E17
#print("E7:", list(lastCol(E7 *Q7)), E7.transpose() *(E7 *Q7) == Q7)

x = S((.1,.2,.3,.4,.5,.6,.7,.8)) # = LL +LR*o1 +RL*o2 +RR*o12
y = S((1,2,3,4,5,6,7,8))
x = S((0,S("x1"),S("x2"),S("x3"),S("x4"),S("x5"),S("x6"),S("x7"),S("x8"),S("x9"),S("xa"),S("xb"),S("xc"),S("xd"),S("xe"),S("xf")))
y = S((0,S("y1"),S("y2"),S("y3"),S("y4"),S("y5"),S("y6"),S("y7"),S("y8"),S("y9"),S("ya"),S("yb"),S("yc"),S("yd"),S("ye"),S("yf")))
#x = S((0,0,0,0,0,S("x13"),0,0))
#y = S((0,0,0,0,0,S("x13"),0,0))
xLL,xLR,xRL,xRR = .1,.2,.3,.4
yLL,yLR,yRL,yRR = 1,2,3,4
c0 = 1
c1 = -1

LL = x.L(2).L(1)*y.L(2).L(1)-y.L(2).R(1)*x.L(2).R(1)-(y.R(2).L(1)*x.R(2).L(1)+x.R(2).R(1)*y.R(2).R(1))
LR = x.L(2).L(1)*y.L(2).R(1)+y.L(2).L(1)*x.L(2).R(1)-(-y.R(2).L(1)*x.R(2).R(1)+x.R(2).L(1)*y.R(2).R(1))
RL = x.L(2).L(1)*y.R(2).L(1)+y.R(2).R(1)*x.L(2).R(1)+y.L(2).L(1)*x.R(2).L(1)-x.R(2).R(1)*y.L(2).R(1)
RR = x.L(2).L(1)*y.R(2).R(1)-y.R(2).L(1)*x.L(2).R(1)+y.L(2).L(1)*x.R(2).R(1)+x.R(2).L(1)*y.L(2).R(1)
XY = [[LL, LR], [RL, RR]]
# x * y = [2, [1, LL, LR], [1, RL, RR]]

#xy = [[xLL, xLR], [xRL, xRR]] * [[yLL, yLR], [yRL, yRR]]
#xy = [[xLL,xLR]*[yLL,yLR]-[yRL,yRR]*[xRL,xRR]*1, [xLL,xLR]*1*[yRL,yRR]+[yLL,yLR,]*[xRL,xRR]]
#xy = [[xLL*yLL-yLR*xLR*c0,xLL*c0*yLR+yLL*xLR]-[yRL*xRL-xRR*c1*yRR*c0,yRL*c0*xRR*c1+xRL*yRR],
#      [xLL*yRL-yRR*xLR*c1*c0, xLL*c0*yRR+yRL*xLR*c1]+[yLL*xRL-xRR*yLR*c0,yLL*c0*xRR+xRL*yLR]]
xy = [[xLL*yLL-yLR*xLR*c0 -yRL*xRL +xRR*c1*yRR*c0, xLL*c0*yLR+yLL*xLR +yRL*c0*xRR*c1+xRL*yRR],
      [xLL*yRL-yRR*xLR*c1*c0 +yLL*xRL-xRR*yLR*c0, xLL*c0*yRR+yRL*xLR*c1 +yLL*c0*xRR+xRL*yLR]]
